#!/bin/bash

#The system will now check for new updates...

if (($(id -u)!=0))
then

    echo "Script must be run as root. Exiting..."

    exit

fi

source /usr/share/shockware-center/appstream-dirs

sudo apt update

sudo mkdir -p "$apt_appstream_dir"/xml

if (($(getconf LONG_BIT)==32)) #if 32-bit system
then

    codename="$(lsb_release -cs)"

    sudo mkdir -p "$apt_appstream_dir"/yaml

    sudo mkdir -p "$apt_appstream_dir"/icons/debian-"$codename"-contrib/48x48

    sudo mkdir -p "$apt_appstream_dir"/icons/debian-"$codename"-main/48x48

    sudo mkdir -p "$apt_appstream_dir"/icons/debian-"$codename"-non-free/48x48

    sudo mkdir -p "$apt_appstream_dir"/icons/debian-"$codename"-contrib/64x64

    sudo mkdir -p "$apt_appstream_dir"/icons/debian-"$codename"-main/64x64

    sudo mkdir -p "$apt_appstream_dir"/icons/debian-"$codename"-non-free/64x64

    if [[ "$(sudo wget https://appstream.debian.org/data/"$codename"/contrib/icons-48x48.tar.gz -P "$apt_appstream_dir"/icons/debian-"$codename"-contrib/48x48 2>&1)" != *"fail"* ]]
    then

        sudo wget https://appstream.debian.org/data/"$codename"/main/icons-48x48.tar.gz -P "$apt_appstream_dir"/icons/debian-"$codename"-main/48x48

        sudo wget https://appstream.debian.org/data/"$codename"/non-free/icons-48x48.tar.gz -P "$apt_appstream_dir"/icons/debian-"$codename"-non-free/48x48

        sudo wget https://appstream.debian.org/data/"$codename"/contrib/icons-64x64.tar.gz -P "$apt_appstream_dir"/icons/debian-"$codename"-contrib/64x64

        sudo wget https://appstream.debian.org/data/"$codename"/main/icons-64x64.tar.gz -P "$apt_appstream_dir"/icons/debian-"$codename"-main/64x64

        sudo wget https://appstream.debian.org/data/"$codename"/non-free/icons-64x64.tar.gz -P "$apt_appstream_dir"/icons/debian-"$codename"-non-free/64x64

        cd "$apt_appstream_dir"/icons/debian-"$codename"-contrib/48x48

        sudo unp -f *.gz

        sudo rm *.gz

        cd "$apt_appstream_dir"/icons/debian-"$codename"-main/48x48

        sudo unp -f *.gz

        sudo rm *.gz

        cd "$apt_appstream_dir"/icons/debian-"$codename"-non-free/48x48

        sudo unp -f *.gz

        sudo rm *.gz

        cd "$apt_appstream_dir"/icons/debian-"$codename"-contrib/64x64

        sudo unp -f *.gz

        sudo rm *.gz

        cd "$apt_appstream_dir"/icons/debian-"$codename"-main/64x64

        sudo unp -f *.gz

        sudo rm *.gz

        cd "$apt_appstream_dir"/icons/debian-"$codename"-non-free/64x64

        sudo unp -f *.gz

        sudo rm *.gz

        sudo wget https://appstream.debian.org/data/"$codename"/contrib/Components-armhf.yml.gz -O "$apt_appstream_dir"/yaml/debian-"$codename"-contrib-Components-armhf.yml.gz

        sudo wget https://appstream.debian.org/data/"$codename"/main/Components-armhf.yml.gz -O "$apt_appstream_dir"/yaml/debian-"$codename"-main-Components-armhf.yml.gz

        sudo wget https://appstream.debian.org/data/"$codename"/non-free/Components-armhf.yml.gz -O "$apt_appstream_dir"/yaml/debian-"$codename"-non-free-Components-armhf.yml.gz

    fi

fi

for i in "$apt_appstream_dir"/yaml/*
do

    sudo appstreamcli convert "$i" "$apt_appstream_dir"/xml/"$(basename "$i")".xml

done

IFS=$'\n'

apt_names=($(grep -ho '<component type="desktop[^"]*">\|<name>[^<]*</name>' "$apt_appstream_dir"/xml/*.xml | sed -n '/<component type="desktop[^"]*">/{n; s/<name>\([^<]*\)<\/name>/\1/; p}'))

apt_pkgnames=($(grep -ho '<component type="desktop[^"]*">\|<pkgname>[^<]*</pkgname>' "$apt_appstream_dir"/xml/*.xml | sed -n '/<component type="desktop[^"]*">/{n; s/<pkgname>\([^<]*\)<\/pkgname>/\1/; p}'))

apt_updates=($(apt list --upgradable | awk '{print  $1}' | cut -d '/' -f1))

unset "apt_updates[0]" #removes "Listing..." from the list because it is obviously not a package

for package in "${apt_updates[@]}"
do

    num=0

    until [[ "${apt_pkgnames[num]}" == "$package" ]] || ((num>${#apt_pkgnames[@]}))
    do

        num=$((num+1))

    done

    if ((num<=${#apt_pkgnames[@]}))
    then

        package="${apt_names[num]}"

    fi

    alphasort_list+=("$package [A]")

done

for flatpak in $(flatpak remote-ls --updates --columns=name)
do

    alphasort_list+=("$flatpak [F]")

done

for app in $(printf "%s\n" "${alphasort_list[@]}" | sort -u)
do

    if [[ "$app" == *" [A]" ]]
    then

        app="${app::-4}"

        update_list+=("/usr/share/shock-update-manager/apt.svg" "$app")

    else

        app="${app::-4}"

        update_list+=("/usr/share/shock-update-manager/flatpak.svg" "$app")

    fi

done
    
printf "%s\n" "${update_list[@]}" | tee /usr/share/shock-update-manager/cache


