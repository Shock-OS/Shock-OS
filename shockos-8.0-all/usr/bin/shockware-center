#!/bin/bash

IFS=$'\n'

#READ/WRITE SETTINGS BEGINS

function read_settings() {

if [[ -e ~/.config/shockware-center ]]
then

	eval "$(cat ~/.config/shockware-center)"

else

	touch ~/.config/shockware-center

	echo 'rows_per_page=100

show_apt_packages=TRUE

show_flatpaks=TRUE' | tee ~/.config/shockware-center

	rows_per_page="100"

	show_apt_packages="TRUE"

	show_flatpaks="TRUE"

fi

}

function write_settings() {

echo "rows_per_page=$rows_per_page

show_apt_packages=$show_apt_packages

show_flatpaks=$show_flatpaks" | tee ~/.config/shockware-center

}

#READ/WRITE SETTINGS ENDS

#THE LOADING FUNCTIONS BEGIN

function start_loading() {

yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --progress-text="Loading..." --center --progress --pulsate --auto-close --undecorated --no-buttons & killpid=$!

}

function end_loading() {

kill -9 $killpid

}

#THE LOADING FUNCTIONS END

read_settings

#all_packages=($(find /var/lib/app-info/icons/*/* -type f -printf '%f\n' | cut -d'_' -f1 | sort -u | awk '{ printf "\"%s\"\n", $0 }')) #ChatGPT

all_packages_icons=($(find /var/lib/app-info/icons/*/* -type f | sed 's/.*/"&"/' | sort -u)) #ChatGPT

appstream_file="/var/lib/flatpak/appstream/flathub/$(uname -m)/active/appstream.xml"

appstream_icons_dir="/var/lib/flatpak/appstream/flathub/$(uname -m)/active/icons/64x64"

IFS=$'\n' read -d '' -ra all_flatpaks <<< "$(flatpak remote-ls --all --app --columns=name | awk '{print "\""$0" [FLATPAK]\""}' RS='\n')" #ChatGPT

IFS=$'\n' read -d '' -ra all_packages <<< "$(python /usr/bin/shockware-center-get-apt-names.py | sort -u)" #ChatGPT

IFS=$'\n' read -d '' -ra apt_packages_and_names <<< "$(python /usr/bin/shockware-center-get-apt-packages-names.py)" #ChatGPT

all_duplicates=()

for i in "${all_packages[@]}"
do

    i="${i::-7}"

    i="${i#\"}"

    echo "$i" #DEBUG

    if [[ " ${all_flatpaks[@]} " == *" \"$i [FLATPAK]\" "* ]] #if app is both an apt and a flatpak
    then

        all_duplicates+=("\"$i [BOTH]\"")

    fi

done

echo "${all_duplicates[@]}" #DEBUG

keyword=""

page=0

while true
do

	start_loading

	search_results_prep_full=()

	if [[ -n "$keyword" ]] #if keyword is not empty
	then

		if [[ "$show_apt_packages" == "TRUE" ]]
		then

			search_results_prep_full=($(printf "%s\n" "${all_packages[@]}" | grep -i "$keyword"))

		fi

		if [[ "$show_flatpaks" == "TRUE" ]]
		then

			search_results_prep_full+=($(printf "%s\n" "${all_flatpaks[@]}" | grep -i "$keyword"))

		fi

	else #if keyword is empty (Show All or on startup)

		if [[ "$show_apt_packages" == "TRUE" ]]
		then

			search_results_prep_full=("${all_packages[@]}")

		fi

		if [[ "$show_flatpaks" == "TRUE" ]]
		then

			search_results_prep_full+=("${all_flatpaks[@]}")

		fi

	fi

	search_results_prep_full=($(printf "%s\n" "${search_results_prep_full[@]}" | sort))

	if (("${#search_results_prep_full[@]}"==0)) #if no search results
	then

		zenity --info --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="No results found." --ok-label="Dismiss"

		if [[ "$show_apt_packages" == "FALSE" ]] && [[ "$show_flatpaks" == "FALSE" ]]
		then

			ex=1 #settings

		else

			ex=2 #search

		fi

		end_loading

	else #if there are search results

		search_results_prep=("${search_results_prep_full[@]:$((rows_per_page*page))}")

		search_results_prep=("${search_results_prep[@]::$((rows_per_page))}")

		mapfile -t search_results_prep < <(printf '%s\n' "${search_results_prep[@]}" | sed 's/^"\(.*\)"$/"\1"/' | sort -u)

		search_results=()

		for i in "${search_results_prep[@]}"
		do

			if [[ "$i" == *" [FLATPAK]\"" ]] #if Flatpak
			then

				name="${i::-11}\""

				name="${name#\"}"

				name="${name%\"}"

				icon="$(grep -A 1 -B 3 "<name>$name</name>" /var/lib/flatpak/appstream/flathub/$(uname -m)/active/appstream.xml | grep '<id>' | awk -F'[<>]' '{print $3}')"

				icon="${icon%% *}"

				icon=$(echo "$icon" | head -n1)

				if [[ "$icon" == *".desktop" ]]
				then

					icon="${icon::-8}"

				fi

				icon="$appstream_icons_dir/$icon.png"

                if [[ " ${all_duplicates[@]} " == *" ${i::-11} [BOTH]\" "* ]] #if duplicate application (both APT and Flatpak)
                then

                    item_number=$(printf '%s\n' "${apt_packages_and_names[@]}" | grep -nF "${i::-11} [APT]\"" | cut -d ':' -f 1 | head -n1) #ChatGPT

                    package_name="${apt_packages_and_names[item_number]}"

                    package_name="${package_name#\"}"

				    package_name="${package_name%\"}"

			        if [[ -n "$icon" ]]
			        then

                        search_results+=("\"$icon\"" "\"$name\"" "\"B\"" "\"$icon\"" "\"$package_name\"")

			        fi

                else #if not duplicate application (Flatpak only)

				    if [[ -f "$icon" ]]
				    then

					    search_results+=("\"$icon\"" "\"$name\"" "\"F\"" "\"$icon\"" "\"N/A\"")

				    fi

                fi

			elif [[ " ${all_duplicates[@]} " != *" ${i::-7} [BOTH]\" "* ]] #if APT package
            then

                name="${i::-7}\""

                item_number=$(printf '%s\n' "${apt_packages_and_names[@]}" | grep -nF "$i" | cut -d ':' -f 1 | head -n1) #ChatGPT

                package_name="${apt_packages_and_names[item_number]}"

                package_name="${package_name#\"}"

				package_name="${package_name%\"}"

				icon="$(find /var/lib/app-info/icons/*/*/"$package_name"_* | head -1)"

				if [[ -n "$icon" ]]
				then

					search_results+=("$icon" "$name" "\"A\"" "\"$package_name\"" "\"N/A\"")

				fi

			fi

		done

		if ((${#search_results_prep_full[@]}>rows_per_page))
		then

		    if ((page>0))
		    then

		        page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

		    else

		        page_buttons='--button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

		    fi

		elif ((page>0))
		then

		    page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50' 

		else

		    page_buttons=""

		fi

		yadlist="yad --window-icon=/usr/share/shockware-center/icon.svg --title=\"Shockware Center\" --text=\"Page $((page+1)) of $(($(expr ${#search_results_prep_full[@]} / $rows_per_page)+1)). Double-click on an app to install/remove it.\" --width=800 --height=500 --buttons-layout=spread --list --dclick-action=shockware-center-view-package --column=\"Icon\":IMG --column=\"Name\" --column=\"Type\":HD --column=\"Icon (only for Flatpaks when clicked on)\":HD --column=\"Flatpak ID column (only used for duplicate packages)\":HD --button=\"Settings\"\!gnome-settings:1 --button=\"Search\"\!gtk-find:2 $page_buttons ${search_results[@]}"

		end_loading

		eval "$yadlist"

		ex=$?

	fi

	if [[ "$ex" == "40" ]] #previous
	then

		page=$((page-1))

	elif [[ "$ex" == "60" ]] #next
	then

		page=$((page+1))

	elif [[ "$ex" == "50" ]] #jump
	then

		jump_page=$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --form --field="Jump to Page:":NUM "$((page+1))\!1..$(($(expr ${#search_results_prep_full[@]} / $rows_per_page)+1))" --button=Jump!gtk-jump-to-ltr)

		ex=$?

		jump_page=$(echo "$jump_page" | awk -F'|' '{print $1}')

        if [[ "$ex" == "0" ]]
        then

            page="$((jump_page-1))"

        fi

	elif [[ "$ex" == "1" ]] #settings
	then

		if [[ "$rows_per_page" == "50" ]]
		then

			rpp='^50!100!200'

		elif [[ "$rows_per_page" == "100" ]]
		then

			rpp='50!^100!200'

		else

			rpp='50!100!^200'

		fi

		settings="$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --form --field="Rows per page:":CB "$rpp" --field="Show APT packages":CHK "$show_apt_packages" --field="Show Flatpaks":CHK "$show_flatpaks" --button="Apply"\!gtk-ok)"

		ex=$?

		if [[ "$ex" == "0" ]]
		then

			rows_per_page=$(echo $settings | awk 'BEGIN {FS="|" } { print $1 }')

			show_apt_packages=$(echo $settings | awk 'BEGIN {FS="|" } { print $2 }')

			show_flatpaks=$(echo $settings | awk 'BEGIN {FS="|" } { print $3 }')

			write_settings

			read_settings

		fi

	elif [[ "$ex" == "2" ]] #search
	then

		newkeyword="$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Please enter a search term." --entry --entry-text="$keyword" --button="Show All"\!open-menu-symbolic:1 --button="Search"\!gtk-find:0 --buttons-layout=edge)"

        ex=$?

		page=0

        if [[ "$ex" == "1" ]] #show all
        then

            keyword=""

        elif [[ "$ex" == "0" ]] #search
        then

            keyword="$newkeyword"

        fi

	else

		exit

	fi

done


