#!/bin/bash

#the root check element begins

if [[ "$(id -u)" != "0" ]]
then

    echo "Script must be run as root. Exiting..."

    exit

fi

#the root check element ends

mkdir -p /usr/share/shock-os-imager

rm /usr/share/shock-os-imager/images

rm /usr/share/shock-os-imager/cached-images/download*

success2="FALSE"

until [[ "$success2" == "TRUE" ]]
do

	internet="yes"

	until [[ -f /usr/share/shock-os-imager/images ]] || [[ "$internet" == "no" ]]
	do

		wget --timeout 5 https://raw.githubusercontent.com/Shock-OS/shock-os-imager/main/images -P /usr/share/shock-os-imager

		if [[ ! -f /usr/share/shock-os-imager/images ]]
		then

			if (($(ls /usr/share/shock-os-imager/cached-images/ | wc -l)>0)) #if there are cached images available
			then

				yad --window-icon=/usr/share/shock-os-imager/icon.svg --image=emblem-important --title="Shock OS Imager" --text="There is no internet connection, but cached images are available. Please either reconnect to the internet and hit 'Retry', or continue with only cached images." --button="Continue with Cached Images Only"\!go-next --button="Retry"\!edit-undo

				ex=$?

				if [[ "$ex" == "0" ]]
				then

					internet="no"

				elif [[ "$ex" != "1" ]]
				then

					exit

				fi

			else

				yad --window-icon=/usr/share/shock-os-imager/icon.svg --image=emblem-important --title="Shock OS Imager" --text="There is no internet connection, and no cached images are available. Please reconnect to the internet and hit 'Retry'." --button="Retry"\!edit-undo

				ex=$?

				if [[ "$ex" != "0" ]]
				then

					exit

				fi

			fi

		fi

	done

	if [[ "$internet" == "yes" ]]
	then

		rm /usr/share/shock-os-imager/images-offline

		cp /usr/share/shock-os-imager/images /usr/share/shock-os-imager/images-offline

		rm /usr/share/shock-os-imager/find-cached-images

		wget https://raw.githubusercontent.com/Shock-OS/shock-os-imager/main/find-cached-images -P /usr/share/shock-os-imager

		eval "$(cat /usr/share/shock-os-imager/images)"

	else

		eval "$(cat /usr/share/shock-os-imager/images-offline)"

		eval "$(cat /usr/share/shock-os-imager/find-cached-images)"

	fi

	drives=($(lsblk | grep /media | grep -oP "sd[a-z]" | awk '{print "/dev/"$1}' | sort -u))

    drives_selection=""

    for i in "${drives[@]}"
    do

        drive_label=""

        for a in {1..1000}
        do

            LABEL=""

            eval $(sudo blkid "${i}${a}" | grep -o 'LABEL="[^"]*"')

            if [[ -z "$LABEL" ]]
            then

                break

            elif [[ -z "$drive_label" ]]
            then

                drive_label="$LABEL"

            else

                drive_label+=",$LABEL"

            fi

        done

        if [[ -z "$drive_label" ]]
        then

            drive_label="NO LABEL"

        fi

        if [[ -z "$drives_selection" ]]
        then

            drives_selection="$i ($drive_label)"

        else

            drives_selection+='!'"$i ($drive_label)"

        fi

    done

    if (($(ls /usr/share/shock-os-imager/cached-images | wc -l)>0))
    then

        cached_images_button='--button=Delete Cached Images!gtk-delete:30'\!remove

    else

        cached_images_button=""

    fi

	output="$(yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Install Shock OS onto an external storage device." --form --field="SD card/USB drive:":CB "$drives_selection" --field="Shock OS version:":CB "$images" "$cached_images_button" --button="Refresh"\!gtk-refresh:10 --button="Flash"\!/usr/share/shock-os-imager/shock-logo.svg:20)"

	ex=$?

	target_drive=$(echo $output | awk 'BEGIN {FS="|" } { print $1 }')

	target_drive_display_name=$(echo $output | awk 'BEGIN {FS="|" } { print $1 }')

	target_drive=$(echo "$target_drive" | cut -d' ' -f1)

    if [[ "$ex" == "30" ]] #delete cached images
    then

        if (($(ls /usr/share/shock-os-imager/cached-images | wc -l)>1)) #plural
        then

            rmci_text="There are $(ls /usr/share/shock-os-imager/cached-images | wc -l) cached images on your system, taking up a total of $(du -sh /usr/share/shock-os-imager/cached-images | awk '{print $1}') of space. Would you like to delete them?"

        else #singular
        
            rmci_text="There is 1 cached image on your system, taking up a total of $(du -sh /usr/share/shock-os-imager/cached-images | awk '{print $1}') of space. Would you like to delete it?"

        fi

        yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="$rmci_text" --button="Yes, remove"\!gtk-ok --button="No, keep"\!gtk-cancel

        ex=$?

        if [[ "$ex" == "0" ]]
        then

            rm -rf /usr/share/shock-os-imager/cached-images/*

            yad --window-icon=/usr/share/shock-os-imager/icon.svg --image=emblem-default --title="Shock OS Imager" --text="All cached images have been successfully removed." --button="Dismiss"\!gtk-quit

        fi

	elif [[ "$target_drive" == "(null)" ]] && [[ "$ex" == "20" ]]
	then

		zenity --window-icon=/usr/share/shock-os-imager/icon.svg --error --title="Shock OS Imager" --text="You have not selected a drive to flash. Please plug in a storage device to install Shock OS on, and then click 'Retry'" --ok-label="Retry" --width=300

    elif [[ -z "$(lsblk -o PATH | grep -w $target_drive)" ]] && [[ "$ex" == "20" ]] #if error reading the device (perhaps it was unplugged)
    then

        zenity --window-icon=/usr/share/shock-os-imager/icon.svg --error --title="Shock OS Imager" --text="An error occured while preparing '$target_drive_display_name' for flashing. Perhaps it was unplugged." --ok-label="Retry" --width=300

	elif (($(lsblk -o PATH,SIZE -b | grep -w $target_drive | awk '{print $2}')<15000000000)) && [[ "$ex" == "20" ]] #if drive is less than 16GB
    then

		target_drive="(null)"

        zenity --window-icon=/usr/share/shock-os-imager/icon.svg --error --title="Shock OS Imager" --text="The SD card/USB drive you selected is too small. Shock OS requires a storage device of at least 16GB. Please insert a storage device that is at least 16GB in size, then press 'Retry' when you are ready to continue." --ok-label="Retry" --width=300

    elif [[ "$ex" != "10" ]] && [[ "$ex" != "20" ]]
	then

		exit

	elif [[ "$ex" == "20" ]]
    then

        success2="TRUE"

    fi

    echo "SUCCESS2: $success2" #DEBUG

done

image_to_flash=$(echo $output | awk 'BEGIN {FS="|" } { print $2 }')

image_to_flash_display="$image_to_flash"

image_to_flash=$(echo "$output" | awk -F'|' '{print $2}')

image_to_flash_display_name="$image_to_flash"

image_to_flash_codename=${image_to_flash:13}

if [[ "$image_to_flash" == *"Legacy"* ]]
then

	image_to_flash_variant="Legacy"

else
	
	image_to_flash_variant=$(echo "$image_to_flash_codename" | sed 's/[^0-9]*//g')

fi

image_to_flash="$(echo "$image_to_flash_codename" | cut -f1 -d" ")$image_to_flash_variant"

echo "TARGET DRIVE: $target_drive

IMAGE TO FLASH: $image_to_flash" #DEBUG

if [[ "$ex" == "20" ]] #flash
then

	url="${!image_to_flash}"

	filename="$(basename "${url%/*}")"

	if [[ ! -f /usr/share/shock-os-imager/cached-images/$filename ]] #if Shock OS image is not already downloaded
	then

		if [[ "$internet" == "no" ]]
		then

			until [[ -f /usr/share/shock-os-imager/images ]]
			do

				wget --timeout 5 https://raw.githubusercontent.com/Shock-OS/shock-os-imager/main/images -P /usr/share/shock-os-imager

				if [[ ! -f /usr/share/shock-os-imager/images ]]
				then

					yad --window-icon=/usr/share/shock-os-imager/icon.svg --image=emblem-important --width=400 --title="No Internet" --text="You are not connected to the internet, and an image for the Shock OS version you selected is not cached. Please either connect to the internet and hit 'Retry', or cancel." --button="Retry"\!edit-undo --button="Cancel"\!gtk-cancel

					ex=$?

					if [[ "$ex" != "0" ]]
					then

						exit

					fi

				fi

			done

		fi

		mkdir -p /usr/share/shock-os-imager/cached-images

		echo "$url" #DEBUG

		{

        wget "$url" -P /usr/share/shock-os-imager/cached-images 2>&1 || {

            zenity --error --text="Failed to download $image_to_flash_display. The program will now exit." --ok-label="Exit" ; kill $$

            }

        } | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | yad --window-icon=/usr/share/shock-os-imager/icon.svg --progress --title="Downloading $image_to_flash_display" --width=310 --text="Downloading $image_to_flash_display. This may take a while..." --progress --pulsate --width=300 --height=100 --center --fixed --button="Cancel Upgrade"\!gtk-cancel:1

		mv /usr/share/shock-os-imager/cached-images/download /usr/share/shock-os-imager/cached-images/$filename

	fi

    if [[ -z "$(lsblk -o PATH | grep -w $target_drive)" ]] #if error reading the device (perhaps it was unplugged)
    then

        zenity --error --text="An error occured while preparing '$target_drive_display_name' for flashing. Perhaps it was unplugged." --ok-label="Exit"

        exit 1

    fi

	partitions=$(lsblk -n "$target_drive" | grep -c '^')

	for ((i=1; i<=$partitions; i++))
	do

		umount "$target_drive$i"

	done | zenity --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Unmounting file systems on $target_device..." --progress --pulsate --no-cancel --auto-close

#THE WRITE SEGMENT BEGINS

    # Launch the command in the background and capture its PID
    sudo unxz -c /usr/share/shock-os-imager/cached-images/"$filename" | sudo dd of=$target_drive bs=4M status=progress > /dev/null 2>&1 & command_pid=$!

    # Show the progress window using yad
    {

    yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Writing $image_to_flash_display to $target_drive_display_name. This will take about 30 minutes..." --progress --pulsate --progress-text="" --width=300 --height=100 --center --fixed --button="Cancel Upgrade"\!gtk-cancel:1

    ex=$?

    if [[ "$ex" != "0" ]]
    then

        kill -9 "$command_pid"
        
    fi

    } &

    # Wait for the command to finish
    wait "$command_pid"

    # Get the command's exit code
    ex=$?

    # Close the yad progress window (if it's still open)
    pkill -f "yad --window-icon=/usr/share/shock-os-imager/icon.svg --title=Shock OS Imager --text=Writing $image_to_flash_display to $target_drive_display_name. This will take about 30 minutes... --progress --pulsate --progress-text= --width=300 --height=100 --center --fixed --button=Cancel Upgrade!gtk-cancel:1"

    # Check if the command exited with a non-zero code and show an error message if needed
    if [[ "$ex" != "0" ]]
    then

        zenity --error --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="An error occurred when writing the image. The program will now exit." --ok-label="Exit" ; kill $$

    fi

#THE WRITE SEGMENT ENDS

	zenity --notification --title="Flashing Complete" --text="$image_to_flash_display has successfully been flashed to $target_drive_display_name."

	yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Congratulations! $image_to_flash_display has successfully been flashed to $target_drive_display_name. Thank you and enjoy!" --button="Dismiss"\!gtk-quit

elif [[ "$ex" != "10" ]]
then

	exit

fi


