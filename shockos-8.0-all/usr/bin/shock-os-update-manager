#!/bin/bash

IFS=$'\n'

#THE LOADING FUNCTIONS BEGIN

function start_loading_gui() {

yad --window-icon=system-software-update --title="Update Manager" --progress-text="Checking for updates..." --center --progress --pulsate --auto-close --undecorated --no-buttons --skip-taskbar & gui_killpid=$!

}

function start_loading() {

yad --window-icon=system-software-update --title="Update Manager" --progress-text="Loading..." --center --progress --pulsate --auto-close --undecorated --no-buttons --skip-taskbar & killpid=$!

}

function end_loading() {

kill -9 $killpid

kill -9 $gui_killpid

}

#THE LOADING FUNCTIONS END

automatic_updates=""

notify_of_new_versions_of_shock_os=""

#THE SETTINGS FUNCTION BEGINS

function settings() {

if [[ -f /etc/sudoers.d/shock_automatic_updates ]] #if automatic updates are enabled
then

    automatic_updates="TRUE"

else #if disabled

    automatic_updates="FALSE"

fi

if [[ ! -f /usr/share/shock-os-update-manager/disable-release-upgrader-indicator ]] #if notification of new versions of Shock OS is enabled
then

    notify_of_new_versions_of_shock_os="TRUE"

else #if disabled

    notify_of_new_versions_of_shock_os="FALSE"

fi

settings="$(yad --window-icon=system-software-update --width=100 --title="Settings" --form --field="If enabled, automatic updates will as root on a daily basis. You cannot log out, shutdown, or restart the system while automatic updates are being applied.":LBL "" --field="Automatic updates":CHK "$automatic_updates" --field="If enabled, you will be notified when an upgrade to a new version of Shock OS is available.":LBL "" --field="Notify me of new versions of Shock OS":CHK "$notify_of_new_versions_of_shock_os" --button="Apply"\!gtk-ok)"

ex=$?

if [[ "$ex" == "0" ]]
then

    automatic_updates=$(echo $settings | awk 'BEGIN {FS="|" } { print $2 }')

    notify_of_new_versions_of_shock_os=$(echo $settings | awk 'BEGIN {FS="|" } { print $4 }')

    if [[ "$automatic_updates" == "TRUE" ]] && [[ ! -f /etc/sudoers.d/shock_automatic_updates ]] #enable automatic updates
    then

        echo 'ALL ALL=NOPASSWD:/usr/bin/shock-auto-updates' | pkexec tee /etc/sudoers.d/shock_automatic_updates

    elif [[ "$automatic_updates" == "FALSE" ]] && [[ -f /etc/sudoers.d/shock_automatic_updates ]] #disable automatic updates
    then

        pkexec rm /etc/sudoers.d/shock_automatic_updates

    fi

    if [[ "$notify_of_new_versions_of_shock_os" == "TRUE" ]] && [[ -f /usr/share/shock-os-update-manager/disable-release-upgrader-indicator ]] #enable notification of new versions of Shock OS
    then

        pkexec rm /usr/share/shock-os-update-manager/disable-release-upgrader-indicator

    elif [[ "$notify_of_new_versions_of_shock_os" == "FALSE" ]] && [[ ! -f /usr/share/shock-os-update-manager/disable-release-upgrader-indicator ]] #disable notification of new versions of Shock OS
    then

        pkexec touch /usr/share/shock-os-update-manager/disable-release-upgrader-indicator

    fi

fi

}

#THE SETTINGS FUNCTION ENDS

function install_updates() {

pkexec env DEBIAN_FRONTEND=gnome apt upgrade -y

flatpak update -y

fetch_updates

}

rows_per_page=100

function fetch_updates() {

sudo shock-os-update-manager-refresh

all_updates=($(apt list --upgradable | awk '{ printf "\"%s\"\n", $0 }'))

unset "all_updates[0]" #removes "Listing..." from the list because it is obviously not a package

appstream_file="/var/lib/flatpak/appstream/flathub/$(uname -m)/active/appstream.xml"

appstream_icons_dir="/var/lib/flatpak/appstream/flathub/$(uname -m)/active/icons/64x64"

flatpak_ids=($(flatpak remote-ls --updates --columns=app))

for i in "${flatpak_ids[@]}"
do

all_updates+=("\"$(flatpak search "$i" --columns=app,name | grep -w "$i" | awk '{str=""; for(i=2;i<=NF;i++) str=str $i " "; sub(/ $/, "", str); printf "%s\n", str}') [FLATPAK]\"")

done

all_updates=($(printf "%s\n" "${all_updates[@]}" | sort))

}

if [[ "$1" == "gui" ]] #if launched from the Shockware Center
then

    touch ~/.cache/shockware-center-launched-update-manager

    eval "$(cat ~/.cache/shock-os-update-manager-notifications)"

    (sleep 10 && rm ~/.cache/shockware-center-launched-update-manager) &

    start_loading_gui

fi

fetch_updates

if ((${#all_updates[@]}==0))
then

    echo "Your system is up to date."

    if [[ "$1" == "gui" ]] #if launched from the Shockware Center
    then

        end_loading

        yad --window-icon=emblem-default --image=emblem-default --buttons-layout=edge --title="Update Manager" --text="Your system is up to date." --button="Settings"\!gnome-settings --button="Dismiss"\!gtk-quit --width=300

        ex=$?

        if [[ "$ex" == "0" ]] #settings
        then

            settings

        fi
    
    fi

    exit

elif ((${#all_updates[@]}==1))
then

    text="${#all_updates[@]} update is available. Click to install it."

else

    text="${#all_updates[@]} updates are available. Click to install them."

fi

while true
do

    if [[ "$1" != "gui" ]] && [[ ! -f /etc/sudoers.d/shock_automatic_updates ]] #if NOT launched from the Shockware Center
    then

        yad --notification --image=system-software-update --text="$text" --icon-size=48 & notification_killpid=$!

        echo "kill -9 $notification_killpid" | tee -a ~/.cache/shock-os-update-manager-notifications

        wait "$notification_killpid"

        if [[ -f ~/.cache/shockware-center-launched-update-manager ]]
        then

            exit

        fi

    elif [[ -f /etc/sudoers.d/shock_automatic_updates ]] #if automatic updates are enabled
    then

        shock-auto-updates-kickstart

        exit

    fi

    page=0

    while true
    do

        start_loading

        all_updates_show=("${all_updates[@]:$((rows_per_page*page))}")

        all_updates_show=("${all_updates_show[@]::$((rows_per_page))}")

        mapfile -t all_updates < <(printf '%s\n' "${all_updates[@]}" | sed 's/^"\(.*\)"$/"\1"/')

        update_list=()

        for i in "${all_updates_show[@]}"
        do

	        if [[ "$i" == *" [FLATPAK]\"" ]] #if Flatpak application
	        then

		        name="${i::-11}\""

		        name="${name#\"}"

		        name="${name%\"}"

		        icon="$(grep -A 1 -B 3 "<name>$name</name>" /var/lib/flatpak/appstream/flathub/$(uname -m)/active/appstream.xml | grep '<id>' | awk -F'[<>]' '{print $3}')"

		        icon="${icon%% *}"

		        icon=$(echo "$icon" | head -n1)

		        if [[ "$icon" == *".desktop" ]]
		        then

			        icon="${icon::-8}"

		        fi

		        icon="$appstream_icons_dir/$icon.png"

		        if [[ ! -f "$icon" ]]
		        then

			        icon="/usr/share/shock-os-update-manager/flatpak.svg"

		        fi
		        
		        update_list+=("\"$icon\"" "\"$name\"" "\"A\"")

	        else #if APT package

                name="${i%%/*}"

                name="${name#\"}"

		        icon="$(find /var/lib/app-info/icons/*/*/"$name"_* | head -1)"

		        if [[ ! -f "$icon" ]]
		        then

			        icon="/usr/share/shock-os-update-manager/apt.svg"

		        fi

                full_name="$(grep -A 10000 "<pkgname>$name</pkgname>" /var/lib/app-info/xml/*.xml | grep '<name>' | head -n1 | awk -F'[<>]' '{print $3}')"

                if [[ -n "$full_name" ]]
                then

                    name="$full_name"

                fi

		        update_list+=("\"$icon\"" "\"$name\"" "\"A\"")

	        fi

        done

        echo "UPDATE LIST: ${update_list[@]}" #DEBUG

        if ((${#update_list[@]}>rows_per_page))
        then

            if ((page>0))
            then

                page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

            else

                page_buttons='--button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

            fi

        elif ((page>0))
        then

            page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50' 

        else

            page_buttons=""

        fi

        yadlist="yad --window-icon=system-software-update --title=\"Update Manager\" --width=800 --height=500 --text=\"Updates are available for the following apps/packages:\" --list --dclick-action=shock-os-update-manager-view-package --no-click --buttons-layout=edge --column=\"Icon\":IMG --column=\"Name\" --column=\"Type\":HD $page_buttons --button=\"Settings\"\!gnome-settings:1 --button=\"Install Updates\"\!system-software-update:2 ${update_list[@]}"

        end_loading

        eval "$yadlist"

        ex=$?

        if [[ "$ex" == "40" ]] #previous
        then

	        page=$((page-1))

        elif [[ "$ex" == "60" ]] #next
        then

	        page=$((page+1))

        elif [[ "$ex" == "50" ]] #jump
        then

	        jump_page=$(yad --window-icon=system-software-update --title="Update Manager" --form --field="Jump to Page:":NUM "$((page+1))\!1..$(($(expr ${#search_results_prep_full[@]} / $rows_per_page)+1))" --button=Jump!gtk-jump-to-ltr)

	        ex=$?

	        jump_page=$(echo "$jump_page" | awk -F'|' '{print $1}')

            if [[ "$ex" == "0" ]]
            then

                page="$((jump_page-1))"

            fi

        elif [[ "$ex" == "1" ]] #settings
        then

            settings

        elif [[ "$ex" == "2" ]] #install updates
        then

	        install_updates | zenity --window-icon=system-software-update --title="Update Manager" --text="Installing updates..." --progress --pulsate --auto-close --no-cancel

	        if ((${#all_updates[@]}>0)) #if there are STILL updates available (updates likely failed or were interrupted)
	        then

		        yad --window-icon=emblem-important --image=emblem-important --title="Update Manager" --text="Failed to install the updates. Please double check your internet connection and try again later." --button="Dismiss"\!gtk-quit --width=400

	        else

		        yad --window-icon=emblem-default --image=emblem-default --title="Update Manager" --text="Your system is up to date." --button="Dismiss"\!gtk-quit --width=300

	        fi

	        exit

        elif [[ "$1" == "gui" ]] #if launched from the Shockware Center
        then

            exit

        else

            break

        fi

    done

done







