#!/bin/bash

#the root check element begins

if [[ "$(id -u)" != "0" ]]
then

    echo "Script must be run as root. Exiting..."

    exit

fi

#the root check element ends

runuser=$1

#this software is a graphical frontend for APT

#the detect_exit function begins

function detect_exit() {

local ex=$?

if [[ "$ex" != "0" ]]
then

    exit

fi

}

#the detect_exit function ends

flatpak_install_list=()

flatpak_install_list_for_page=()

flatpak_removal_list=()

flatpak_removal_list_for_page=()

apt_install_list=()

apt_removal_list=()

#the record function begins

function record() {

local counter=0

packages_output=$(echo "$packages_output" | awk -v FS="|" -v OFS="|" '{ for (i=1; i<=NF; i++) { $i = "\"" $i "\"" ; gsub(/""/,"",$i) ; gsub(/\|\|/,"|",$i) } gsub(/\|\|/,"|",$0) } 1' | tr '|' ' ') #ChatGPT

readarray -t packages_output <<< "$packages_output" #ChatGPT

get_installed

until [[ -z "${packages_output[counter]}" ]]
do

    local installed=$(echo "${packages_output[counter]}" | cut -d'"' -f2) #ChatGPT

    local type=$(echo "${packages_output[counter]}" | cut -d'"' -f4) #ChatGPT

    local package_name=$(echo "${packages_output[counter]}" | cut -d'"' -f6) #ChatGPT

    if [[ "$type" == "FLATPAK" ]] #FLATPAK
    then

        if [[ "$installed" == "TRUE" ]] && [[ " ${installed_flatpaks[@]} " != *" \"$package_name [FLATPAK]\" "* ]] && [[ " ${flatpak_install_list[@]} " != *" \"$package_name\" "* ]] #if flatpak selected for installation
        then

            flatpak_install_list+=("\"$package_name\"")

            flatpak_install_list_for_page+=("\"$package_name [FLATPAK]\"")

        elif [[ "$installed" == "FALSE" ]] && [[ " ${installed_flatpaks[@]} " == *" \"$package_name [FLATPAK]\" "* ]] && [[ " ${flatpak_removal_list[@]} " != *" \"$package_name\" "* ]] #if flatpak selected for removal
        then

            flatpak_removal_list+=("\"$package_name\"")

            flatpak_removal_list_for_page+=("\"$package_name [FLATPAK]\"")

        elif [[ "$installed" == "FALSE" ]] && [[ " ${flatpak_install_list[@]} " == *" \"$package_name\" "* ]] #if flatpak unselected for installation
        then

            # the ChatGPT remove from array patch begins

            for i in "${!flatpak_install_list[@]}"
            do

              if [[ "${flatpak_install_list[$i]}" == "\"$package_name\"" ]]
              then

                unset "flatpak_install_list[$i]"

                break # remove only the first exact match

              fi

            done

            # the ChatGPT remove from array patch ends

            # the ChatGPT remove from array patch begins

            for i in "${!flatpak_install_list_for_page[@]}"
            do

              if [[ "${flatpak_install_list_for_page[$i]}" == "\"$package_name [FLATPAK]\"" ]]
              then

                unset "flatpak_install_list_for_page[$i]"

                break # remove only the first exact match

              fi

            done

            # the ChatGPT remove from array patch ends

        elif [[ "$installed" == "TRUE" ]] && [[ " ${flatpak_removal_list[@]} " == *" \"$package_name\" "* ]] #if flatpak unselected for removal
        then

            # the ChatGPT remove from array patch begins

            for i in "${!flatpak_removal_list[@]}"
            do

              if [[ "${flatpak_removal_list[$i]}" == "\"$package_name\"" ]]
              then

                unset "flatpak_removal_list[$i]"

                break # remove only the first exact match

              fi

            done

            # the ChatGPT remove from array patch ends

            # the ChatGPT remove from array patch begins

            for i in "${!flatpak_removal_list_for_page[@]}"
            do

              if [[ "${flatpak_removal_list_for_page[$i]}" == "\"$package_name [FLATPAK]\"" ]]
              then

                unset "flatpak_removal_list_for_page[$i]"

                break # remove only the first exact match

              fi

            done

            # the ChatGPT remove from array patch ends

        fi

    else #APT

        if [[ "$installed" == "TRUE" ]] && [[ " ${installed_packages[@]} " != *" \"$package_name\" "* ]] && [[ " ${apt_install_list[@]} " != *" \"$package_name\" "* ]] #if apt package selected for installation
        then

            apt_install_list+=("\"$package_name\"")

        elif [[ "$installed" == "FALSE" ]] && [[ " ${installed_packages[@]} " == *" \"$package_name\" "* ]] && [[ " ${apt_removal_list[@]} " != *" \"$package_name\" "* ]] #if apt package selected for removal
        then

            apt_removal_list+=("\"$package_name\"")

        elif [[ "$installed" == "FALSE" ]] && [[ " ${apt_install_list[@]} " == *" \"$package_name\" "* ]] #if apt package unselected for installation
        then

            # the ChatGPT remove from array patch begins

            for i in "${!apt_install_list[@]}"
            do

              if [[ "${apt_install_list[$i]}" == "\"$package_name\"" ]]
              then

                unset "apt_install_list[$i]"

                break # remove only the first exact match

              fi

            done

            # the ChatGPT remove from array patch ends

        elif [[ "$installed" == "TRUE" ]] && [[ " ${apt_removal_list[@]} " == *" \"$package_name\" "* ]] #if apt package unselected for removal
        then

            # the ChatGPT remove from array patch begins

            for i in "${!apt_removal_list[@]}"
            do

              if [[ "${apt_removal_list[$i]}" == "\"$package_name\"" ]]
              then

                unset "apt_removal_list[$i]"

                break # remove only the first exact match

              fi

            done

            # the ChatGPT remove from array patch ends

        fi

    fi

    let counter++

done

}

#the record function ends

#the apply function begins

function apply() {

if [[ "${#apt_install_list[@]}" == "0" ]] && [[ "${#apt_removal_list[@]}" == "0" ]] && [[ "${#flatpak_install_list[@]}" == "0" ]] && [[ "${#flatpak_removal_list[@]}" == "0" ]] #if no packages selected for installation or removal
then

    end_loading

    yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Nothing has been selected for installation or removal." --button="Dismiss"

else #if at least one package is selected for installation or removal

    local text=""

    local file=0

    until [[ ! -f "/tmp/shockware-center-$runuser-$file" ]]
    do

        let file++

    done

    if (("${#apt_install_list[@]}">0)) #if there are APT packages selected for installation
    then

        apt_install_list_no_quotes=("${apt_install_list[@]}")

        for i in "${!apt_install_list_no_quotes[@]}"
        do

          apt_install_list_no_quotes[$i]=$(echo "${apt_install_list_no_quotes[$i]}" | sed 's/"//g')

        done

        if (("${#apt_install_list[@]}">1)) #if multiple packages
        then

            echo "The following APT packages will be INSTALLED:
    $(printf "%s\n" "${apt_install_list_no_quotes[@]}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        else #if single package

            echo "The following APT package will be INSTALLED:
    $(printf "%s\n" "${apt_install_list_no_quotes[@]}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        fi

    fi

    if (("${#apt_removal_list[@]}">0)) #if there are APT packages selected for removal
    then

        apt_removal_list_no_quotes=("${apt_removal_list[@]}")

        for i in "${!apt_removal_list_no_quotes[@]}"
        do

          apt_removal_list_no_quotes[$i]=$(echo "${apt_removal_list_no_quotes[$i]}" | sed 's/"//g')

        done

        if (("${#apt_removal_list[@]}">1)) #if multiple packages
        then

            echo "The following APT packages will be REMOVED:
    $(printf "%s\n" "${apt_removal_list_no_quotes[@]}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        else #if single package

            echo "The following APT package will be REMOVED:
    $(printf "%s\n" "${apt_removal_list_no_quotes[@]}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        fi

    fi

    if (("${#flatpak_install_list[@]}">0)) #if there are flatpaks selected for installation
    then

        if (("${#flatpak_install_list[@]}">1)) #if multiple flatpaks
        then

            echo "The following Flatpaks will be INSTALLED:
    $(printf "%s\n" "${flatpak_install_list[@]//\"/}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        else #if single flatpak

            echo "The following Flatpak will be INSTALLED:
    $(printf "%s\n" "${flatpak_install_list[@]//\"/}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        fi

    fi

    if (("${#flatpak_removal_list[@]}">0)) #if there are flatpaks selected for removal
    then

        if (("${#flatpak_removal_list[@]}">1)) #if multiple flatpaks
        then

            echo "The following Flatpaks will be REMOVED:
    $(printf "%s\n" "${flatpak_removal_list[@]//\"/}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        else #if single flatpak

            echo "The following Flatpak will be REMOVED:
    $(printf "%s\n" "${flatpak_removal_list[@]//\"/}")
    " | tee -a "/tmp/shockware-center-$runuser-$file"

        fi

    fi

    end_loading

    yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text-info --filename="/tmp/shockware-center-$runuser-$file" --width=400 --height=300 --button="Cancel"\!gtk-cancel:1 --button="Apply"\!gtk-ok:0

    ex=$?

    if [[ "$ex" == "0" ]]
    then

        if (("${#apt_install_list[@]}">0)) #if apt packages are pending installation
        then

            for i in "${apt_install_list_no_quotes[@]}"
            do

                yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Installing ${apt_install_list_no_quotes[i]}..." & local apply_killpid=$!

                sudo apt install -y "${apt_install_list_no_quotes[i]}" | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --progress --pulsate --text="Installing ${apt_install_list_no_quotes[i]}..." --no-cancel --auto-close --width=300 --height=50

                kill -9 $apply_killpid

            done

        fi

        if (("${#apt_removal_list[@]}">0)) #if apt packages are pending removal
        then

            for i in "${apt_removal_list_no_quotes[@]}"
            do

                yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Removing ${apt_removal_list_no_quotes[i]}..." & local apply_killpid=$!

                sudo apt remove -y "${apt_removal_list_no_quotes[i]}" | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --progress --pulsate --text="Removing ${apt_removal_list_no_quotes[i]}..." --no-cancel --auto-close --width=300 --height=50

                kill -9 $apply_killpid

            done

        fi

        if (("${#flatpak_install_list[@]}">0)) #if flatpaks are pending installation
        then

            for element in "${flatpak_install_list[@]}"
            do

                yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Installing ${element//\"/}..." & local apply_killpid=$!

                sudo -u "$runuser" flatpak install -y "$(flatpak search ${element//\"/} --columns=name,application | grep "^${element//\"/}" | awk -F '\t' '{print $2}' | head -n1)" | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --progress --pulsate --text="Installing ${element//\"/}..." --no-cancel --auto-close --width=300 --height=50

                kill -9 $apply_killpid

            done

        fi

        if (("${#flatpak_removal_list[@]}">0)) #if flatpaks are pending removal
        then

            for element in "${flatpak_removal_list[@]}"
            do

                yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Removing ${element//\"/}..." & local apply_killpid=$!

                sudo -u "$runuser" flatpak uninstall -y "$(flatpak search ${element//\"/} --columns=name,application | grep "^${element//\"/}" | awk -F '\t' '{print $2}' | head -n1)" | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --progress --pulsate --text="Removing ${element//\"/}..." --no-cancel --auto-close --width=300 --height=50

                kill -9 $apply_killpid

            done

        fi

        flatpak_install_list=()

        flatpak_install_list_for_page=()

        flatpak_removal_list=()

        flatpak_removal_list_for_page=()

        apt_install_list=()

        apt_removal_list=()

    fi    

fi

start_loading

rm "/tmp/shockware-center-$runuser-$file"

}

#the apply function ends

#the read_settings function begins

function read_settings() {

if [[ -f "/home/$runuser/.config/shockware-center" ]] #if config file exists
then

    view_mode_setting=$(sed -n 1p "/home/$runuser/.config/shockware-center")

    rows_per_page=$(sed -n 2p "/home/$runuser/.config/shockware-center")

    show_apt_packages=$(sed -n 3p "/home/$runuser/.config/shockware-center")

    if [[ "$(aptitude show flatpak | grep State:)" == "State: installed" ]] #if flatpak is installed
    then

        show_flatpaks=$(sed -n 4p "/home/$runuser/.config/shockware-center")

    else #if flatpak is not installed

        show_flatpaks="FALSE"

    fi

else #if no config file exists

    if [[ "$(aptitude show flatpak | grep State:)" == "State: installed" ]] #if flatpak is installed
    then

        show_flatpaks="TRUE"

    else #if flatpak is not installed

        show_flatpaks="FALSE"

    fi

    view_mode_setting="Large"

    rows_per_page="100"

    show_apt_packages="TRUE"

    echo "$view_mode_setting" | tee "/home/$runuser/.config/shockware-center"

    echo "$rows_per_page" | tee -a "/home/$runuser/.config/shockware-center"

    echo "$show_apt_packages" | tee -a "/home/$runuser/.config/shockware-center"

    echo "$show_flatpaks" | tee -a "/home/$runuser/.config/shockware-center"

fi

}

#the read_settings function ends

read_settings

#the clean function begins

function clean() {

if [[ "$(apt list)" == *"[installed,auto-removable]"* ]]
then

    end_loading

    purge=$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Your system has obsolete packages and dependencies." --form --field="Purge obsolete configuration files (deep clean)":CHK 'FALSE' --button="Clean")

    ex=$?

    if [[ "$ex" == "0" ]]
    then

        if [[ "$purge" == "TRUE|" ]]
        then

            yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Purging obsolete packages, dependencies and configuration files..." & local apply_killpid=$!

            sudo apt autoremove --purge -y | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Purging obsolete packages and dependencies..." --progress --pulsate --no-cancel --auto-close

            sudo dpkg --list | grep '^rc' | awk '{print $2}' | xargs sudo dpkg --purge | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Purging obsolete configuration files..." --progress --pulsate --no-cancel --auto-close

            kill -9 $apply_killpid

            if [[ "$(apt list)" != *"[residual-config]"* ]]
            then

                yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-default --title="Shockware Center" --text="Your system is all clean. There are no obsolete packages, dependencies or configuration files left on your system." --button="Dismiss"

            else

                yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-important --title="Shockware Center" --text="An error occurred while purging obsolete packages, dependencies and configuration files." --button="Dismiss"

            fi

        else

            yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Removing obsolete packages and dependencies..." & local apply_killpid=$!

            sudo apt autoremove -y | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Removing obsolete packages and dependencies..." --progress --pulsate --no-cancel --auto-close

            kill -9 $apply_killpid

            if [[ "$(apt list)" != *"[installed,auto-removable]"* ]]
            then

                yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-default --title="Shockware Center" --text="Obsolete packages and dependencies have been removed." --button="Dismiss"

            else

                yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-important --title="Shockware Center" --text="An error occurred while removing obsolete packages and dependencies." --button="Dismiss"

            fi

        fi

    fi

elif [[ "$(apt list)" == *"[residual-config]"* ]]
then

    end_loading

    purge=$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="You have no obsolete packages or dependencies installed. However, some obsolete configuration files still remain on your system." --button="Clean")

    ex=$?

    if [[ "$ex" == "0" ]]
    then

        yad --notification --image=size=48 --image=/usr/share/shockware-center/icon.svg --command="" --text="Purging obsolete configuration files..." & local apply_killpid=$!

        sudo dpkg --list | grep '^rc' | awk '{print $2}' | xargs sudo dpkg --purge | zenity --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Purging obsolete configuration files..." --progress --pulsate --no-cancel --auto-close

        kill -9 $apply_killpid

        if [[ "$(apt list)" != *"[residual-config]"* ]]
        then

            yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-default --title="Shockware Center" --text="Your system is all clean. There are no obsolete packages, dependencies or configuration files left on your system." --button="Dismiss"

        else

            yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-important --title="Shockware Center" --text="An error occurred while purging obsolete configuration files." --button="Dismiss"

        fi

    fi

else

    end_loading

    yad --window-icon=/usr/share/shockware-center/icon.svg --image=emblem-default --title="Shockware Center" --text="Your system is all clean. There are no obsolete packages, dependencies or configuration files left on your system." --button="Dismiss"

fi

start_loading

}

#the clean function ends

#the loading functions begin

function start_loading() {

yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --progress-text="Loading..." --center --progress --pulsate --auto-close --undecorated --no-buttons & killpid=$!

}

function end_loading() {

kill -9 $killpid

}

#the loading functions end

#the get_installed function begins

function get_installed() {

if [[ "$show_apt_packages" == "TRUE" ]]
then

    installed_packages=($(aptitude search '~i' -F "%p" | grep "$keyword" | sed 's/.*/"&"/')) #ChatGPT

fi

if [[ "$show_flatpaks" == "TRUE" ]]
then

    IFS=$'\n' read -d '' -ra installed_flatpaks <<< "$(flatpak list --columns=name | awk '{print "\""$0" [FLATPAK]\""}' RS='\n')" #ChatGPT

    if [[ "${installed_flatpaks[@]}" == "\"No matches found [FLATPAK]\"" ]] #if no flatpaks are installed
    then

        installed_flatpaks=()
    
    fi

fi

}

#the get_installed function ends

dclick_action='sh -c "/usr/bin/shockware-center-show-package %s >/dev/null 2>&1 &"' #ChatGPT

page=0

keyword=""

start_loading

while true
do

    if [[ "$view_mode_setting" == "Large" ]]
    then

        view_mode="32"

    else

        view_mode="16"

    fi

    packages_input=()

    if [[ -n "$keyword" ]] #if keyword is not empty (whenever a search is made)
    then

        if [[ "$show_apt_packages" == "TRUE" ]]
        then

            aptitude_search='!~v'

            aptitude_search+=" $keyword"

            packages_input=($(aptitude search "$aptitude_search" -F %p | sed 's/.*/"&"/')) #ChatGPT

        fi

        if [[ "$show_flatpaks" == "TRUE" ]]
        then

            IFS=$'\n' read -d '' -ra flatpak_search_results <<< "$(flatpak search --arch=$(uname -m) --columns=name $keyword | awk '{print "\""$0" [FLATPAK]\""}' RS='\n')" #ChatGPT

            if [[ "${flatpak_search_results[@]}" != "\"No matches found [FLATPAK]\"" ]] #only if flatpaks matching the keyword are found
            then

                packages_input+=("${flatpak_search_results[@]}")

            fi

        fi

    else #if keyword is empty (on startup or when 'Show All' selected from search) (shows all packages available)

        if [[ "$show_apt_packages" == "TRUE" ]]
        then

            packages_input=($(aptitude search '!~v' -F %p | sed 's/.*/"&"/'))

        fi

        if [[ "$show_flatpaks" == "TRUE" ]]
        then

            IFS=$'\n' read -d '' -ra flatpak_search_results <<< "$(flatpak remote-ls --all --app --columns=name | awk '{print "\""$0" [FLATPAK]\""}' RS='\n')" #ChatGPT

            packages_input+=("${flatpak_search_results[@]}")

        fi

    fi

    #the sort in alphabetical order patch begins

    packages_input_values=$(printf "%s\n" "${packages_input[@]}")

    packages_input=$(echo "$packages_input_values" | sort)

    mapfile -t packages_input <<< "$packages_input"

    #the sort in alphabetical order patch ends

    packages_input_for_yad_page_counter=("${packages_input[@]}")

    packages_input=("${packages_input[@]:$((rows_per_page*page))}")

    get_installed

    packages=()

    counter=0

    until ((counter>${#packages_input[@]})) || ((counter>rows_per_page))
    do

        if [[ -n "${packages_input[counter]}" ]] && [[ "${packages_input[counter]}" != '"$kernel"' ]]
        then

            if [[ "${packages_input[counter]}" == *' [FLATPAK]"' ]] #FLATPAK
            then

                if [[ " ${installed_flatpaks[@]} " == *" ${packages_input[counter]} "* || " ${flatpak_install_list_for_page[@]} " == *" ${packages_input[counter]} "* ]] && [[ " ${flatpak_removal_list_for_page[@]} " != *" ${packages_input[counter]} "* ]] #if flatpak installed or selected for installation
                then

                    packages+=("TRUE")

                else

                    packages+=("FALSE")

                fi

                packages+=("\"/usr/share/shockware-center/flatpak$view_mode.png\"")

                packages+=("FLATPAK")

                packages+=("${packages_input[counter]::-11}\"")

            else #APT

                if [[ " ${installed_packages[@]} " == *" ${packages_input[counter]} "* || " ${apt_install_list[@]} " == *" ${packages_input[counter]} "* ]] && [[ " ${apt_removal_list[@]} " != *" ${packages_input[counter]} "* ]] #if APT package installed or selected for installation
                then

                    packages+=("TRUE")

                else

                    packages+=("FALSE")

                fi

                packages+=("\"/usr/share/shockware-center/apt$view_mode.png\"")

                packages+=("APT")

                packages+=("${packages_input[counter]}")

            fi

        fi

        let counter++

    done

    if ((${#packages_input[@]}>rows_per_page))
    then

        if ((page>0))
        then

            page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

        else

            page_buttons='--button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

        fi

    elif ((page>0))
    then

        page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50' 

    else

        page_buttons=""

    fi

    if (("${#packages[@]}">0)) #if at least 1 search result
    then

        yad_list='yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Page: $((page+1)) out of $(($(expr ${#packages_input_for_yad_page_counter[@]} / $rows_per_page)+1))
    Double-click an package for more information on it.
    To bulk install/remove software, check the software you want to install, and uncheck the software you want to remove." --list --dclick-action="$dclick_action" --column="Installed":CHK --column="Type":IMG --column="TYPE":HD --column="Name" --button="Settings"!gtk-execute:0 --button="Updates"!software-update-available-symbolic:10 --button="Clean"!/usr/share/shockware-center/clean.png:20 --button="Search"!gtk-find:30 $page_buttons --button="Apply"!gtk-ok:80 --width=800 --height=500 --print-all --search-column=4 --buttons-layout=spread'

        yad_list+=" ${packages[@]}"

        end_loading

        packages_output=$(eval $yad_list)

        ex=$?

    else #if no search results

        end_loading

        zenity --info --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="No results found." --ok-label="Dismiss"

        ex="30"

    fi

    if [[ "$ex" == *"0"* ]]
    then

        start_loading

    fi

    record

    if [[ "$ex" == "0" ]] #settings
    then

        if [[ "$view_mode_setting" == "Large" ]]
        then

            view_mode_toggle='Large!Small'

        else

            view_mode_toggle='Large!^Small'

        fi

        if [[ "$rows_per_page" == "50" ]]
        then

            rows_per_page_toggle='50!100!200'

        elif [[ "$rows_per_page" == "100" ]]
        then

            rows_per_page_toggle='50!^100!200'

        else

            rows_per_page_toggle='50!100!^200'

        fi

        end_loading

        settings_output=$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --form --field="View Mode:":CB "$view_mode_toggle" --field="Rows Per Page:":CB "$rows_per_page_toggle" --field="Show APT Packages":CHK "$show_apt_packages" --field="Show Flatpaks":CHK "$show_flatpaks" --button="Apply"\!gtk-ok --width=300)

        ex=$?

        start_loading

        if [[ "$ex" == "0" ]]
        then

            view_mode_setting=$(echo "$settings_output" | awk -F'|' '{print $1}')

            rows_per_page=$(echo "$settings_output" | awk -F'|' '{print $2}')

            show_apt_packages=$(echo "$settings_output" | awk -F'|' '{print $3}')

            show_flatpaks=$(echo "$settings_output" | awk -F'|' '{print $4}')

            echo "$view_mode_setting" | tee "/home/$runuser/.config/shockware-center"

            echo "$rows_per_page" | tee -a "/home/$runuser/.config/shockware-center"

            echo "$show_apt_packages" | tee -a "/home/$runuser/.config/shockware-center"

            echo "$show_flatpaks" | tee -a "/home/$runuser/.config/shockware-center"

            read_settings

        fi

    elif [[ "$ex" == "10" ]] #updates
    then

        end_loading

        shock-os-update-manager & exit

    elif [[ "$ex" == "20" ]] #clean
    then

        clean
 
    elif [[ "$ex" == "30" ]] #search
    then

        page=0

        new_keyword_entry="$keyword"

        new_keyword=""

        end_loading

        until ((${#new_keyword}>=3)) && [[ "$ex" != "10" ]]
        do

            search_output="$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --form --field="Keyword:" "$new_keyword_entry" --field="Show APT Packages":CHK "$show_apt_packages" --field="Show Flatpaks":CHK "$show_flatpaks" --button="Show All":10 --button="Search":0 --width=300)"

            ex=$?

            if [[ "$ex" != "0" ]]
            then

                break

            fi

            new_keyword=$(echo "$search_output" | awk -F'|' '{print $1}')

            new_keyword_entry="$new_keyword"

            if ((${#new_keyword}<3)) && [[ "$ex" != "10" ]]
            then

                yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --text="Your search keyword must be at least three characters long." --button="Retry"

            fi

        done

        start_loading

        if [[ "$ex" == "0" ]]
        then

            keyword=$(echo "$search_output" | awk -F'|' '{print $1}')

            show_apt_packages=$(echo "$search_output" | awk -F'|' '{print $2}')

            show_flatpaks=$(echo "$search_output" | awk -F'|' '{print $3}')

        elif [[ "$ex" == "10" ]]
        then

            keyword=""

            show_apt_packages=$(echo "$search_output" | awk -F'|' '{print $2}')

            show_flatpaks=$(echo "$search_output" | awk -F'|' '{print $3}')

        fi

    elif [[ "$ex" == "40" ]] #previous page
    then

        let page--

    elif [[ "$ex" == "50" ]] #jump
    then

        jump_page=$(yad --window-icon=/usr/share/shockware-center/icon.svg --title="Shockware Center" --form --field="Jump to Page:":NUM "$((page+1))\!1..$(($(expr ${#packages_input_for_yad_page_counter[@]} / $rows_per_page)+1))" --button=Jump!gtk-jump-to-ltr)

        jump_page=$(echo "$jump_page" | awk -F'|' '{print $1}')

        ex=$?

        if [[ "$ex" == "0" ]]
        then

            page="$((jump_page-1))"

        fi

    elif [[ "$ex" == "60" ]] #next page
    then

        let page++

    elif [[ "$ex" == "80" ]] #apply
    then

        apply

    else

        exit

    fi

done

