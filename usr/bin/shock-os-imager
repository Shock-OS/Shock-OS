#!/bin/bash

if [[ "$(id -u)" != "0" ]]
then

    echo "Script must be run as root. Exiting..."

fi

runuser=$1

success3="no"

until [[ "$success3" == "yes" ]]
do

    success3="yes"

    success2="no"

    until [[ "$success2" == "yes" ]]
    do

        success2="yes"

        lsblk | grep /media | grep -oP "sd[a-z]" | awk '{print "/dev/"$1}' | sort | uniq | tee /tmp/shock-os-imager-"$runuser"-drives

        counter=1

        drives=""

        ex="0"

        success="yes"

        until [[ "$success" == "no" ]]
        do

            current_line=$(sed -n "$counter"p /tmp/shock-os-imager-"$runuser"-drives)

            if [[ -z "$current_line" ]]
            then

                success="no"

            fi

            echo "counter: $counter" #DEBUG

            echo "current_line: $current_line" #DEBUG

            if ! [[ -z "$current_line" ]]
            then

                current_label="5555"

                label_part_counter=1

                label=""

                until [[ -z "$current_label" ]]
                do

                    current_label=$(echo "$password" | sudo -S blkid "$current_line""$label_part_counter")

                    if [[ "$current_label" == *"LABEL="* ]]
                    then

                        current_label="${current_label#*:}"

                        eval "$current_label"

                        if [[ -z "$label" ]]
                        then

                            label="$LABEL"

                        else

                            label="$label,$LABEL"

                        fi

                    elif [[ -z "$label" ]]
                    then

                        label="NO LABEL"

                    fi

                    let label_part_counter++

                done

                if [[ -z "$drives" ]]
                then

                    drives="$current_line ($label)"

                else

                    drives="$drives!$current_line ($label)"

                fi

            fi

            let counter++

        done

        echo "$password" | sudo -S rm /usr/share/shock-os-imager/images*

        echo "$password" | sudo -S wget --timeout 5 https://raw.githubusercontent.com/Shock-OS/shock-os-imager/main/images -P /usr/share/shock-os-imager

        if [[ -f /usr/share/shock-os-imager/images ]]
        then

            echo "$password" | sudo -S rm /usr/share/shock-os-imager/image-url-list

            echo "$password" | sudo -S mv /usr/share/shock-os-imager/images /usr/share/shock-os-imager/image-url-list

        fi

        eval $(cat /usr/share/shock-os-imager/image-url-list)

        cached_images=""

        if (($(ls /usr/share/shock-os-imager/cached-images | wc -l)>0))
        then

            cached_images="--button=Clear Cached Images:3"

        fi

        message=""

        ping -c 3 google.com

        cti=$?

        if [[ "$cti" != "0" ]]
        then

            message="--field=Your computer is not connected to the internet. Only cached images may be used while offline, because downloading images requires an internet connection.:LBL"

        fi

        output=$(yad --window-icon=/usr/share/shock-os-imager/icon.svg --width=300 --title='Shock OS Imager' --form --field='SD Card/USB Drive:':CB "$drives" --field='Shock OS Image:':CB "$images" "$message" --button="Cancel":1 "$cached_images" --button="Refresh Drives":2 --button="Write":0)

        ex=$?

        echo "$ex"

        if [[ "$ex" != "0" ]] && [[ "$ex" != "2" ]] && [[ "$ex" != "3" ]]
        then

            exit

        elif [[ "$ex" == "2" ]]
        then

            success2="no"

        elif [[ "$ex" == "3" ]]
        then

            success2="no"

            if (($(ls /usr/share/shock-os-imager/cached-images | wc -l)>1))
            then

                yad --window-icon=/usr/share/shock-os-imager/icon.svg --title='Shock OS Imager' --text="You are about to delete $(ls /usr/share/shock-os-imager/cached-images | wc -l) cached images. Would you like to continue?" --button="Cancel":1 --button="Delete Cached Images":0

            else

                yad --window-icon=/usr/share/shock-os-imager/icon.svg --title='Shock OS Imager' --text="You are about to delete 1 cached image. Would you like to continue?" --button="Cancel":1 --button="Delete Cached Image":0

            fi

            ex4=$?

            if [[ "$ex4" == "0" ]]
            then

                echo "$password" | sudo -S rm /usr/share/shock-os-imager/cached-images/*

            fi

        fi

        drive_to_write=$(echo "$output" | awk -F'|' '{print $1}')

        drive_to_write_display_name="$drive_to_write"

        drive_to_write=$(echo "$drive_to_write" | cut -f1 -d" ")

        shock_os_image=$(echo "$output" | awk -F'|' '{print $2}')

        shock_os_image_display_name="$shock_os_image"

        shock_os_image_codename=${shock_os_image:13}

        if [[ "$shock_os_image" == *"Legacy"* ]]
        then

            shock_os_image_variant="Legacy"

        else
            
            shock_os_image_variant=$(echo "$shock_os_image_codename" | sed 's/[^0-9]*//g')

        fi

        shock_os_image="$(echo "$shock_os_image_codename" | cut -f1 -d" ")$shock_os_image_variant"

        echo "shock_os_image: $shock_os_image

        drive_to_write: $drive_to_write"

        if [[ "$drive_to_write" == "(null)" ]] && [[ "$ex" != "2" ]]
        then

            success2="no"

            yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="You have not selected a drive to write the Shock OS image to. Please plug in a SD card or USB stick that you do not mind erasing, then select 'Retry'." --button="Retry"

        elif (($(echo "$password" | sudo -S blockdev --getsize64 $drive_to_write)<15000000000)) && [[ "$ex" != "2" ]] #drive is less than 16GB
        then

            success2="no"

            yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="The SD card/USB Drive you selected is too small. Shock OS requires a storage device of at least 16GB. Please insert a storage device that is at least 16GB in size, then press 'Retry' when you are ready to continue." --button="Retry"

        fi

    done

    if ! [[ -f /usr/share/shock-os-imager/cached-images/$shock_os_image.img.xz ]]
    then

        ping -c 3 google.com

        cti=$?

        if [[ "$cti" == "0" ]]
        then

            url="${!shock_os_image}"

            echo "$password" | sudo -S exit_code=$(wget "$url" -P /usr/share/shock-os-imager/cached-images 2>&1 >/dev/null; echo $?) | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | yad --window-icon=/usr/share/shock-os-imager/icon.svg --progress --title="Downloading Image..." --width=310 --text="Downloading $shock_os_image_display_name. This may take a while..." --no-buttons --auto-close --auto-kill

            ex3=$?

            echo $ex3

            if [[ "$ex3" != "0" ]]
            then

                exit

            fi

            mv /usr/share/shock-os-imager/cached-images/download /usr/share/shock-os-imager/cached-images/$shock_os_image.img.xz

        else

            yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Error downloading $shock_os_image_display_name. Please connect to the internet or use a cached image." --button="Dismiss"

            success3="no"

        fi

    fi

done

echo "$password" | sudo -S umount $drive_to_write*

echo "$password" | sudo -S unxz -c /usr/share/shock-os-imager/cached-images/$shock_os_image.img.xz | sudo dd of=$drive_to_write bs=4M status=progress | zenity --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Writing $shock_os_image_display_name to $drive_to_write_display_name. This will take about 30 minutes..." --progress --pulsate --auto-close --no-cancel

zenity --notification --title="Flashing Complete" --text="$shock_os_image_display_name has successfully been flashed to $drive_to_write_display_name."

yad --window-icon=/usr/share/shock-os-imager/icon.svg --title="Shock OS Imager" --text="Congratulations! $shock_os_image_display_name has successfully been flashed to $drive_to_write_display_name. Thank you and enjoy!" --button="Dismiss"


