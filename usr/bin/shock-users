#!/bin/bash

#the root check element begins

if [[ "$(id -u)" != "0" ]]
then

    echo "Script must be run as root. Exiting..."

fi

#the root check element ends

yad --window-icon=system-users --title="Users" --text="Would you like to add or remove users?" --button="Add" --button="Remove" --button="Advanced" --button="Cancel" --buttons-layout=center

action=$?

if [[ "$action" == "0" ]] #add
then

    success="no"

    x=""

    full_name=""

    pa1=""

    pa2=""

    focus_field="1"

    until [[ "$success" == "yes" ]]
    do

        nui=$(yad --window-icon=system-users --title="New User" --form --focus-field="$focus_field" --field="Username:" "$x" --field="Full name:" "$full_name" --field="":LBL "" --field="For security reasons, a strong password is highly recommended. Strong passwords consist of:
        - at least eight characters
        - both lower and upper case letters
        - numbers
        - special characters":LBL "" --field="Password:":H "" --field="Verify password:":H "" --field="":LBL "" --field="The privilages of child profiles can be managed in the 'Parental Controls' app. Screen time limits can be imposed on child profiles. Child profiles cannot gain root access or use the 'sudo' command.":LBL "" --field="Child Profile":CHK "$kidprofile" --separator='`' --button="Create User")

        cnu=$?

        echo "$cnu"

        if [[ "$cnu" == "0" ]]
        then

                x=$(echo "$nui" | awk -F'`' '{print $1}')

                full_name=$(echo "$nui" | awk -F'`' '{print $2}')

                pa1=$(echo "$nui" | awk -F'`' '{print $5}')

                pa2=$(echo "$nui" | awk -F'`' '{print $6}')

                kidprofile=$(echo "$nui" | awk -F'`' '{print $9}')

            success="yes"

            if [[ "$(grep -o '`' <<<"$nui" | wc -l)" != "9" ]]
            then

                yad --window-icon=system-users --title="Unsupported Character" --text='You cannot use the "`" character in any field. Please try again.' --button="Retry"

                    success="no"

                    x=""

                    full_name=""

                    pa1=""

                    pa2=""

                    focus_field="1"

            elif [[ -z "$x" ]] || [[ "$x" == *" "* ]]
            then

                yad --window-icon=system-users --title="Invalid Username" --text="Your username cannot be empty or contain spaces. Please try again." --button="Retry"

                success="no"

                focus_field="1"

            elif [[ -d /home/$x ]]
            then

                yad --window-icon=system-users --title="User Already Exists" --text="The username '$x' is already taken. Please choose a different one." --button="Retry"

                success="no"

                focus_field="1"

            elif [[ "$(expr "$x" : "^[a-z][-a-z0-9_]*\$" )" == "0" ]] #if username doesn't match the regular expression configured via the NAME_REGEX variable
            then

                yad --window-icon=system-users --title="Invalid Username" --text="That username does not meet the necessary requirements. Usernames must start with a lowercase letter and can only contain lowercase letters, digits, hyphens and underscores." --button="Retry"

                success="no"

                focus_field="1"

            elif [[ -z "$full_name" ]] || ! [[ $full_name = *[!\ ]* ]]
            then

                yad --window-icon=system-users --title="Invalid Full Name" --text="Your full name cannot be empty or only consist of spaces. Please try again." --button="Retry"

                success="no"

                focus_field="2"

            elif [[ -z "$pa1" || "$pa1" == *" "* ]]
            then

                yad --window-icon=system-users --title="Invalid Password" --text="Your password cannot be empty or contain spaces. Please try again." --button="Retry"

                success="no"

                focus_field="5"

            elif [[ "$pa1" != "$pa2" ]]
            then

                yad --window-icon=system-users --title="Passwords Did Not Match" --text="Oops! The passwords did not match. Please try again." --button="Retry"

                success="no"

                focus_field="5"

            fi

        else

            exit

        fi

    done

        x=$(echo "$x" | awk '{print tolower($0)}') #this command makes all the letters lowercase

        x=$(echo ${x//[[:blank:]]/}) #this command removes all spaces

        x=$(echo "$x" | tr -cd '[:alnum:]._-') #this command removes all numbers

        sudo adduser --disabled-password --gecos "$full_name" $x #the user has been created

        sudo echo "$x:$pa1" | sudo chpasswd

        pa1=""

        pa2=""

        if [[ "$kidprofile" == "TRUE" ]]
        then

            sudo usermod -a -G adm,dialout,cdrom,audio,video,plugdev,games,users,input,render,netdev,spi,i2c,gpio $x #the user has been added to the required groups (excluding sudo)

            sudo touch /home/$x/.shock_kidprofile

            sudo chattr +i /home/$x/.shock_kidprofile

        else

            sudo usermod -a -G adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,render,netdev,spi,i2c,gpio $x #the user has been added to the required groups

        fi

        yad --window-icon=system-users --title="User Created Successfully" --text="Congratulations! You have successfully created the user '$x'." --button="Dismiss"

elif [[ "$action" == "1" ]] #remove
then

    userlist=""

    users_on_sys=(/home/*)

    users_num=$(ls /home | wc -l)

    current_user=0

    while (( $current_user < $users_num ))
    do

        newbutton="${users_on_sys[$current_user]}"

        newbutton="${newbutton##*/}"

        if [[ -z $userlist ]]
        then

            userlist="$newbutton"

        else

            userlist="$userlist!$newbutton"

        fi

        let current_user++

    done

    urs="no"

    until [[ "$urs" == "yes" ]]
    do

        output=$(yad --window-icon=system-users --title="Remove User" --buttons-layout=center --text="Please select the user you would like to remove below:" --form --field="":CB "$userlist" --button="Next")

        ex=$?

        if [[ "$ex" != "0" ]]
        then

            exit

        fi

        user_to_remove=$(echo "$output" | awk -F'|' '{print $1}')

        yad --window-icon=system-users --title="Remove User" --text="You are about to remove the user '$user_to_remove'. THIS ACTION IS IRREVERSABLE AND WILL ERASE ALL THEIR DATA. Are you sure you would like to delete '$user_to_remove'?" --button="DELETE USER" --button="Cancel"

        rdu=$?

        if [[ "$rdu" != "0" ]]
        then

            yad --window-icon=system-users --title="Operation Aborted" --text="The user '$user_to_remove' was not removed. No changes were made to your system." --button="Dismiss"

            exit

        fi

        urs="yes"

        if [[ "$(w | grep x-session-manager | awk '{print " "$1" "}')" == *" $user_to_remove "* ]]
        then

            yad --window-icon=system-users --title="Cannot Remove User" --text="You cannot remove the user '$user_to_remove' because they are currently logged in." --button="Dismiss"

            urs="no"

        elif [[ "$(ps -u $user_to_remove)" == *":"* ]]
        then

            yad --window-icon=system-users --title="Cannot Remove User" --text="The user '$user_to_remove' cannot be removed because they have been logged in and are still occupied by some system processes. To delete this user, reboot the system (without loggin in as '$user_to_remove') and try again." --button="Dismiss"

            urs="no"

        elif ! [[ -d /home/$utd ]]
        then

            yad --window-icon=system-users --title="Cannot Remove User" --text="The user '$user_to_remove' does not exist." --button="Dismiss"

            urs="no"

        fi

    done

    #removing restricting child profile files if they exist... (ignore errors from these lines if user being removed is not a child profile)

    sudo chattr -i /home/$user_to_remove/.shock_kidprofile

    sudo chattr -i /home/$utr/.shock_screen_time_limit

    sudo rm /home/$user_to_remove/.shock_kidprofile

    sudo rm /home/$utr/.shock_screen_time_limit

    sudo rm /usr/bin/shock-$utr-pcstl

    sudo rm /etc/sudoers.d/shock-$utr-pcstl

    sudo chattr -R -i /home/$utr/.shock_pcstl

    sudo rm -r /home/$utr/.shock_pcstl

    #child profile files removed

    sudo deluser --remove-home $user_to_remove

    yad --window-icon=system-users --title="User Successfully Removed" --text="Congratulations! The user '$user_to_remove' has successfully been removed." --button="Dismiss"

elif [[ "$action" == "2" ]]
then

    users-admin

fi
            


