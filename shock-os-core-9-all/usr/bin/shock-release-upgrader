#!/bin/bash

#the root check element begins

if (($(id -u)!=0))
then

    echo "Script must be run as root. Exiting..."

    exit

elif [[ -f /usr/share/shock-update-manager/disable-release-upgrader-indicator ]]
then

    yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrading is Disabled" --text="Checking for and upgrading to new releases of Shock OS is currently disabled. To re-enable this functionality, go to the Update Manager -> Settings, check the box that says 'Notify me of new versions of Shock OS', and try again later." --button="Dismiss"\!gtk-close

    exit

fi

#the root check element ends

verified="TRUE"

function verify() {

#USAGE: verify [.SIG FILE] [FILE] [Window text]

# Launch the command in the background and capture its PID
{ gpg --verify "$1" "$2" || verified="FALSE"; } > /dev/null 2>&1 & command_pid=$!

# Show the progress window using YAD

yad --window-icon=shock-release-upgrader --image=shock-release-upgrader --title="Verifying... This may take a while..." --text="$3" --progress --pulsate --progress-text="" --width=300 --height=100 --button="Cancel"\!gtk-cancel:1 & yad_pid=$!

# Wait for either the command to finish or the YAD window to close
wait -n "$command_pid" "$yad_pid"

# Get the command's exit code
ex=$?

# Close the YAD progress window (if the command finished), or kill the command (if the YAD window was closed)
if ps -p "$command_pid"
then

    kill "$command_pid"

else

    kill "$yad_pid"

fi

# Check if the command exited with a non-zero code and show an error message if needed
if [[ "$ex" != "0" ]]
then

    yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Canceled" --text="The upgrade has been cancelled." --button="Exit"\!gtk-cancel ; kill $$

elif [[ "$verified" == "FALSE" ]]
then

    yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Failed" --text="Failed to verify $2. The upgrade has failed. Please double-check that your internet connection is stable and reliable and try again later." --button="Exit"\!gtk-cancel ; kill $$

fi

}

function create_deb() {

    #THE DEB PACKAGING SEGMENT BEGINS

    command_failed="FALSE"

    # Launch the command in the background and capture its PID
    { dpkg-deb --build "$1" || command_failed="TRUE" ; } > /dev/null 2>&1 & command_pid=$!

    # Show the progress window using YAD

    yad --window-icon=shock-release-upgrader --image=shock-release-upgrader --title="Packaging..." --text="Packaging $(basename "$1")... This may take a while..." --progress --pulsate --progress-text="" --width=300 --height=100 --button="Cancel"\!gtk-cancel:1 & yad_pid=$!

    # Wait for either the command to finish or the YAD window to close
    wait -n "$command_pid" "$yad_pid"

    # Get the command's exit code
    ex=$?

    # Close the YAD progress window (if the command finished), or kill the command (if the YAD window was closed)
    if ps -p "$command_pid"
    then

        kill "$command_pid"

    else

        kill "$yad_pid"

    fi

    # Check if the command exited with a non-zero code and show an error message if needed
    if [[ "$ex" != "0" ]]
    then

        yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Cancelled" --text="The upgrade has been cancelled." --button="Exit"\!gtk-cancel ; kill $$

    elif [[ "$command_failed" == "TRUE" ]]
    then

        yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Failed" --text="Failed to package the upgrade. The upgrade has been cancelled." --button="Exit"\!gtk-cancel ; kill $$

    fi

    #THE DEB PACKAGING SEGMENT ENDS

}

function wait_apt_lock() {

mkdir -p ~/.cache/shock-tmp/shockware-center

until (($(lslocks | grep -c apt)==0)) && [[ ! -f ~/.cache/shock-tmp/shockware-center/apt-queue ]] #waits until /var/lib/dpkg/lock-frontend is not being held
do

    echo "#Waiting for APT lock..."

    sleep 3

done

echo "#"

}

current_version="$(apt show shock-os-core | grep Version: | awk '{print $2}')"

mkdir -p /usr/share/shock-release-upgrader

rm /usr/share/shock-release-upgrader/codenames

until [[ -f /usr/share/shock-release-upgrader/codenames ]]
do

    wget --timeout 5 https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/codenames -P /usr/share/shock-release-upgrader

    if  [[ ! -f /usr/share/shock-release-upgrader/codenames ]]
    then

        echo "An internet connection is required. Exiting..."

        yad --window-icon=shock-release-upgrader --image=emblem-important --title="No Internet" --text="An internet connection is required to upgrade. Please verify that your internet connection is stable and reliable before upgrading." --button="Retry"\!edit-undo --button="Cancel"\!gtk-cancel

        ex=$?

        if [[ "$ex" != "0" ]]
        then

            exit 1

        fi

    fi

done

latest_version="$(cat /usr/share/shock-release-upgrader/codenames | wc -l)"

upgrto_version=$((current_version+1))

if [[ "$upgrto_version" == "10" ]]
then

    upgrto_version_display_name="X"

else

    upgrto_version_display_name="$upgrto_version"

fi

if ((latest_version>current_version))
then

    upgrto_version_codename="$(sed -n "$upgrto_version"p /usr/share/shock-release-upgrader/codenames)"

    zenity --question --window-icon=shock-release-upgrader --title="Prepare to Upgrade" --text="Before upgrading, please make sure of the following:

1. The system is connected to a constant power supply.

2. The internet connection is stable and reliable.

3. No APT packages are being installed, removed or upgraded. If the Shockware Center or the Update Manager is running, please wait for it to finish and then close it out before continuing.

NOTE: The logout and power options in the start menu will be temporarily disabled while upgrading because powering off the machine during the upgrade process is highly discouraged and may render your system unusable.

Please press 'Upgrade to Shock OS $upgrto_version_display_name $upgrto_version_codename' when you are ready to go on." --width=500 --ok-label="Upgrade to Shock OS $upgrto_version_display_name $upgrto_version_codename" --cancel-label="Cancel"

    ex=$?

    if ((ex!=0))
    then

        exit

    fi

    mkdir -p /usr/share/shock-release-upgrader/upgrades

    rm -rf /usr/share/shock-release-upgrader/upgrades/*

    { wget https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/"${upgrto_version}-core.zip" -P /usr/share/shock-release-upgrader/upgrades 2>&1 || { zenity --error --window-icon=shock-release-upgrader --title="Download Failed" --text="Failed to download the upgrade pack. The upgrade has been cancelled." --ok-label="Exit"; kill $$; }; } | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | yad --window-icon=/usr/share/shock-release-upgrader/icon.svg --image=shock-release-upgrader --progress --title="Downloading the Upgrade Pack" --width=310 --text="Downloading the Shock OS $upgrto_version_display_name $upgrto_version_codename core upgrade pack. This may take a while..." --progress --width=300 --height=100 --center --fixed --auto-close --auto-kill --button="Cancel Upgrade"\!gtk-cancel:1

    wget https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/"${upgrto_version}-core.zip.sig" -P /usr/share/shock-release-upgrader/upgrades

    verify /usr/share/shock-release-upgrader/upgrades/"${upgrto_version}-core.zip.sig" /usr/share/shock-release-upgrader/upgrades/"${upgrto_version}-core.zip" "Verifying the core update package..."

    installed_packages=($(apt list --installed | awk -F/ '{print $1}' | uniq))

    if [[ " ${installed_packages[@]} " == *" shock-os-mate-desktop "* ]] #GET MATE EDITION UPGRADES
    then

        { wget https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/"${upgrto_version}-mate.zip" -P /usr/share/shock-release-upgrader/upgrades 2>&1 || { zenity --error --window-icon=shock-release-upgrader --title="Download Failed" --text="Failed to download the upgrade pack. The upgrade has been cancelled." --ok-label="Exit"; kill $$; }; } | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | yad --window-icon=/usr/share/shock-release-upgrader/icon.svg --image=shock-release-upgrader --progress --title="Downloading the Upgrade Pack" --width=310 --text="Downloading the Shock OS $upgrto_version_display_name $upgrto_version_codename MATE Edition upgrade pack. This may take a while..." --progress --width=300 --height=100 --center --fixed --auto-close --auto-kill --button="Cancel Upgrade"\!gtk-cancel:1

        wget https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/"${upgrto_version}-mate.zip.sig" -P /usr/share/shock-release-upgrader/upgrades

        verify /usr/share/shock-release-upgrader/upgrades/"${upgrto_version}-mate.zip.sig" /usr/share/shock-release-upgrader/upgrades/"${upgrto_version}-mate.zip" "Verifying the MATE Edition update package..."

    else #GET GNOME EDITION UPGRADES

        { wget https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/"${upgrto_version}-gnome.zip" -P /usr/share/shock-release-upgrader/upgrades 2>&1 || { zenity --error --window-icon=shock-release-upgrader --title="Download Failed" --text="Failed to download the upgrade pack. The upgrade has been cancelled." --ok-label="Exit"; kill $$; }; } | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | yad --window-icon=/usr/share/shock-release-upgrader/icon.svg --image=shock-release-upgrader --progress --title="Downloading the Upgrade Pack" --width=310 --text="Downloading the Shock OS $upgrto_version_display_name $upgrto_version_codename GNOME Edition upgrade pack. This may take a while..." --progress --width=300 --height=100 --center --fixed --auto-close --auto-kill --button="Cancel Upgrade"\!gtk-cancel:1

        wget https://sourceforge.net/projects/shock-os-download-mirror/files/upgrades/shock-release-upgrader/"${upgrto_version}-gnome.zip.sig" -P /usr/share/shock-release-upgrader/upgrades

        verify /usr/share/shock-release-upgrader/upgrades/"${upgrto_version}-gnome.zip.sig" /usr/share/shock-release-upgrader/upgrades/"${upgrto_version}-gnome.zip" "Verifying the GNOME Edition update package..."

    fi

    #THE EXTRACTING SEGMENT BEGINS

    command_failed="FALSE"

    cd /usr/share/shock-release-upgrader/upgrades

    # Launch the command in the background and capture its PID
    { unp -f * || command_failed="TRUE" ; } > /dev/null 2>&1 & command_pid=$!

    # Show the progress window using YAD

    yad --window-icon=shock-release-upgrader --image=shock-release-upgrader --title="Extracting Files..." --text="Extracting the upgrade packages. This may take a while..." --progress --pulsate --progress-text="" --width=300 --height=100 --button="Cancel"\!gtk-cancel:1 & yad_pid=$!

    # Wait for either the command to finish or the YAD window to close
    wait -n "$command_pid" "$yad_pid"

    # Get the command's exit code
    ex=$?

    # Close the YAD progress window (if the command finished), or kill the command (if the YAD window was closed)
    if ps -p "$command_pid"
    then

        kill "$command_pid"

    else

        kill "$yad_pid"

    fi

    # Check if the command exited with a non-zero code and show an error message if needed
    if [[ "$ex" != "0" ]]
    then

        yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Canceled" --text="The upgrade has been cancelled." --button="Exit"\!gtk-cancel ; kill $$

    elif [[ "$command_failed" == "TRUE" ]]
    then

        yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Failed" --text="Failed to extract the upgrade packages. The upgrade has been cancelled." --button="Exit"\!gtk-cancel ; kill $$

    fi

    #THE EXTRACTING SEGMENT ENDS

    rm /usr/share/shock-release-upgrader/upgrades/*.zip

    for deb in /usr/share/shock-release-upgrader/upgrades/*
    do

        create_deb "$deb"

    done

    for dir in /usr/share/shock-release-upgrader/upgrades/*
    do

        if [[ -d "$dir" ]]
        then

            if [[ -f "$dir"/override ]]
            then

                bash "$dir"/override

            else

                if [[ -f "$dir"/preupgr ]]
                then

                    bash "$dir"/preupgr

                fi

                { wait_apt_lock; pkexec env DEBIAN_FRONTEND=gnome apt-get install --show-progress -y "$dir".deb | stdbuf -o0 grep 'Progress:' | stdbuf -o0 grep -oP '\d+(?=%)' | (echo "#Pending..."; stdbuf -o0 sed 's/.*/&\n#&%/g'); } | yad --no-buttons --no-escape --fixed --width=400 --window-icon=shock-release-upgrader --title="Installing Upgrades..." --image=shock-release-upgrader --text="Installing the $(basename "$dir") upgrade pack...
<small>The upgrade will continue in the background if this window is closed.</small>" --text-align=center --auto-close --progress

                if [[ -f "$dir"/postupgr ]]
                then

                    bash "$dir"/postupgr

                fi

            fi

       fi

    done

    upgrade_successful="TRUE"

    if [[ "$(apt show shock-os-core | grep Version: | awk '{print $2}')" != "$upgrto_version" ]]
    then

        upgrade_successful="FALSE"

    fi

    installed_packages=($(apt list --installed | awk -F/ '{print $1}' | uniq))

    if [[ " ${installed_packages[@]} " == *" shock-os-mate-desktop "* ]]
    then

        if [[ "$(apt show shock-os-mate-desktop | grep Version: | awk '{print $2}')" != "$upgrto_version" ]]
        then

            upgrade_successful="FALSE"

        fi

    elif [[ "$(apt show shock-os-gnome-desktop | grep Version: | awk '{print $2}')" != "$upgrto_version" ]]
    then

        upgrade_successful="FALSE"

    fi

    if [[ "$upgrade_successful" == "TRUE" ]]
    then

        yad --window-icon=shock-release-upgrader --image=emblem-default --title="Upgrade Complete" --text="Congratulations! Your system has sucessfully been upgraded to Shock OS $upgrto_version_display_name $upgrto_version_codename. Please reboot for the changes to take full effect." --button="Reboot Later"\!gtk-ok:1 --button="Reboot Now"\!gtk-refresh:0

        ex=$?

        if [[ "$ex" == "0" ]]
        then

            sudo reboot

        fi

    else

        yad --window-icon=shock-release-upgrader --image=emblem-important --title="Upgrade Failed" --text="Something went wrong, and your system was not upgraded to Shock OS $upgrto_version_display_name $upgrto_version_codename. Please double-check your internet connection and try again later." --button="Exit"\!gtk-cancel

    fi

fi



