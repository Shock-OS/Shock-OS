#!/bin/bash

#the root check element begins

if [[ "$(id -u)" != "0" ]]
then

    echo "Script must be run as root. Exiting..."

    exit

fi

#the root check element ends

IFS=$'\n'

runuser="$1"

#THE VIEW CURRENT USER FUNCTION BEGINS

#this function outputs the user that is using the currently active desktop session

function view-current-user() {

for i in $(loginctl --no-legend list-sessions)
do
    session="$(echo "$i" | awk '{print $1}')"

    session_info="$(loginctl show-session "$session")"

    session_info="${session_info// /}" #removes all spaces to satisfy the eval command

    eval "$session_info"

    if [[ "$Active" == "yes" ]] && [[ "$Type" == "x11" || "$Type" == "wayland" ]] && [[ -d /home/"$Name" ]]
    then

        echo "$Name"

    fi

done

}

#THE VIEW CURRENT USER FUNCTION ENDS

if (($(ps aux | awk '{print $1,$11,$12,$13}' | grep -c "root /bin/bash /usr/bin/shock-pcstl-daemon $runuser")>2)) #exits the program if it is already running for this user
then

    exit

fi

#the above for and if loops exit the script if it is already running for this user.      

if [[ " $(groups "$runuser") " == *" shock-child "* ]] && [[ -f /usr/share/shock-pcstl/"$runuser"/shock-screen-time-limit ]] #if account is a child profile with a screen time limit set
then

    sudo ntpdate -u pool.ntp.org #synchronizes the time if the system is connected to the internet

    chattr -R -i /usr/share/shock-pcstl/"$runuser"/today #UPDATE COMPATIBILITY

    mkdir -p /usr/share/shock-pcstl/"$runuser"/today

    daily_limit="$(cat /usr/share/shock-pcstl/"$runuser"/shock-screen-time-limit)"

    if [[ -f /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)" ]] #if child has already been logged on today
    then

        minutes="$(cat /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)")" #read minutes from the file

        if ((minutes==0)) #if out of time
        then

            killall -15 -u "$runuser"

            killall -9 -u "$runuser"

            exit

        fi

    else #if child has not been logged on today

        minutes="$daily_limit"

        rm -r /usr/share/shock-pcstl/"$runuser"/today/*

        chattr -i /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

        echo "$minutes" | tee /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

        chattr +i /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

    fi

    until ((minutes==0))
    do

        if [[ ! -f /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)" ]] #if new day, or screen time limit has been changed, then restart timer
        then

            if [[ -d /usr/share/shock-pcstl/"$runuser" ]]
            then

                daily_limit="$(cat /usr/share/shock-pcstl/"$runuser"/shock-screen-time-limit)"

                minutes="$daily_limit"

                mkdir -p /usr/share/shock-pcstl/"$runuser"/today

                chattr -i /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

                rm -r /usr/share/shock-pcstl/"$runuser"/today/*

                echo "$minutes" | tee /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

                chattr +i /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

            else #if screen time limit has been removed for this user

                kill -9 "$2"

                exit

            fi

        fi  

        if [[ "$(view-current-user)" == "$runuser" ]]
        then

            minutes=$((minutes-1))

            chattr -i /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

            echo "$minutes" | tee /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

            chattr +i /usr/share/shock-pcstl/"$runuser"/today/"$(date +%F)"

            if ((minutes<0)) #if screen time is up
            then

                zenity --notification --text="Your screen time is up. Logging off..."

                sleep 5

            elif ((minutes<5)) #if 5 or less minutes
            then

                zenity --notification --text="You have $((minutes+1)) minutes of screen time remaining. Please find a stopping point, save your work, and prepare to log off." &

            fi

        fi

        if ((minutes<60))
        then

            for second in {59..0} #counts down the seconds in a minute (for shock-pcstl-timeleft)
            do

                until [[ "$(view-current-user)" == "$runuser" ]]
                do

                    sleep 1

                done

                echo "$second" | tee /usr/share/shock-pcstl/"$runuser"/today/seconds

                sleep 1

            done

        else

            sleep 60

        fi

    done

    killall -15 -u "$runuser"

    killall -9 -u "$runuser"

    exit

fi
