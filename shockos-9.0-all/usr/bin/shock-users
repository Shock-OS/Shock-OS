#!/bin/bash

#the root check element begins

if [[ "$(id -u)" != "0" ]]
then

    echo "Script must be run as root. Exiting..."

    exit

fi

#the root check element ends

if [[ "$1" != "--setup" ]]
then

    runuser="$1"

fi

#THE DETECT EXIT FUNCTION BEGINS

function detect_exit() {

ex=$?

if [[ "$ex" != "0" ]] && [[ "$1" != "--setup" ]]
then

    exit

fi

}

#THE DETECT EXIT FUNCTION ENDS

if [[ "$1" != "--setup" ]]
then

    yad --window-icon=system-users --title="Users" --text="Would you like to add or remove users?" --button="Add"\!add --button="Remove"\!remove --button="Advanced"\!gnome-settings --button="Cancel"\!gtk-cancel --buttons-layout=center

    action=$?

else #if running initial setup

    action="0"

fi

if [[ "$action" == "0" ]] #add
then

    success="no"

    x=""

    full_name=""

    pa1=""

    pa2=""

    focus_field="1"

    until [[ "$success" == "yes" ]]
    do

        if [[ "$1" != "--setup" ]] #if regular mode
        then

            nui=$(yad --window-icon=system-users --title="New User" --form --focus-field="$focus_field" --field="Username:" "$x" --field="Full name:" "$full_name" --field="":LBL "" --field="For security reasons, a strong password is highly recommended. Strong passwords consist of:
        - at least eight characters
        - both lower and upper case letters
        - numbers
        - special characters":LBL "" --field="Password:":H "" --field="Verify password:":H "" --field="":LBL "" --field="The privilages of child profiles can be managed in the 'Parental Controls' app. Screen time limits can be imposed on child profiles. Child profiles cannot gain root access or use the 'sudo' command.":LBL "" --field="Child Profile":CHK "$kidprofile" --separator='`' --button="Create User"\!add)

        else #initial setup mode

            kidprofile="FALSE"

            nui=$(yad --window-icon=system-users --title="New User" --form --focus-field="$focus_field" --field="Username:" "$x" --field="Full name:" "$full_name" --field="":LBL "" --field="For security reasons, a strong password is highly recommended. Strong passwords consist of:
        - at least eight characters
        - both lower and upper case letters
        - numbers
        - special characters":LBL "" --field="Password:":H "" --field="Verify password:":H "" --field="":LBL "" --field="The privilages of child profiles can be managed in the 'Parental Controls' app. Screen time limits can be imposed on child profiles. Child profiles cannot gain root access or use the 'sudo' command.":LBL "" --separator='`' --button="Create User"\!add)

        fi

        cnu=$?

        echo "$cnu"

        if [[ "$cnu" == "0" ]]
        then

                x=$(echo "$nui" | awk -F'`' '{print $1}')

                full_name=$(echo "$nui" | awk -F'`' '{print $2}')

                pa1=$(echo "$nui" | awk -F'`' '{print $5}')

                pa2=$(echo "$nui" | awk -F'`' '{print $6}')

                kidprofile=$(echo "$nui" | awk -F'`' '{print $9}')

            success="yes"

            if [[ "$(grep -o '`' <<<"$nui" | wc -l)" != "9" && "$1" != "--setup" ]] || [[ "$(grep -o '`' <<<"$nui" | wc -l)" != "8" && "$1" == "--setup" ]]
            then

                yad --window-icon=system-users --title="Unsupported Character" --text='You cannot use the "`" character in any field. Please try again.' --button="Retry"\!edit-undo

                detect_exit

                success="no"

                x=""

                full_name=""

                pa1=""

                pa2=""

                focus_field="1"

            elif [[ -z "$x" ]] || [[ "$x" == *" "* ]]
            then

                yad --window-icon=system-users --title="Invalid Username" --text="Your username cannot be empty or contain spaces. Please try again." --button="Retry"\!edit-undo

                detect_exit

                success="no"

                focus_field="1"

            elif [[ -d /home/$x ]]
            then

                yad --window-icon=system-users --title="User Already Exists" --text="The username '$x' is already taken. Please choose a different one." --button="Retry"\!edit-undo

                detect_exit

                success="no"

                focus_field="1"

            elif [[ "$(expr "$x" : "^[a-z][-a-z0-9_]*\$" )" == "0" ]] #if username doesn't match the regular expression configured via the NAME_REGEX variable
            then

                yad --window-icon=system-users --title="Invalid Username" --text="That username does not meet the necessary requirements. Usernames must start with a lowercase letter and can only contain lowercase letters, digits, hyphens and underscores." --button="Retry"\!edit-undo

                detect_exit

                success="no"

                focus_field="1"

            elif [[ -z "$full_name" ]] || ! [[ $full_name = *[!\ ]* ]]
            then

                yad --window-icon=system-users --title="Invalid Full Name" --text="Your full name cannot be empty or only consist of spaces. Please try again." --button="Retry"\!edit-undo

                detect_exit

                success="no"

                focus_field="2"

            elif [[ -z "$pa1" || "$pa1" == *" "* ]]
            then

                yad --window-icon=system-users --title="Invalid Password" --text="Your password cannot be empty or contain spaces. Please try again." --button="Retry"\!edit-undo

                detect_exit

                success="no"

                focus_field="5"

            elif [[ "$pa1" != "$pa2" ]]
            then

                yad --window-icon=system-users --title="Passwords Did Not Match" --text="Oops! The passwords did not match. Please try again." --button="Retry"\!edit-undo

                detect_exit

                success="no"

                focus_field="5"

            fi

        elif [[ "$1" != "--setup" ]]
        then

            exit

        fi

    done

        x=$(echo "$x" | awk '{print tolower($0)}') #this command makes all the letters lowercase

        x=$(echo ${x//[[:blank:]]/}) #this command removes all spaces

        x=$(echo "$x" | tr -cd '[:alnum:]._-') #this command removes all numbers

        adduser --disabled-password --gecos "$full_name" $x || (zenity --error --text="Failed to create a new user. The program will now exit." --ok-label="Exit" ; kill $$) #the user has been created

        echo "$x:$pa1" | chpasswd

        pa1=""

        pa2=""

        if [[ "$kidprofile" == "TRUE" ]]
        then

            groupadd shock-child || (zenity --error --text="Failed to create the 'shock-child' group. The program will now exit." --ok-label="Exit" ; kill $$)

            usermod -a -G adm,dialout,cdrom,audio,video,plugdev,games,users,input,render,netdev,spi,i2c,gpio,shock-child $x || (zenity --error --text="Failed to add the user to the required groups. The program will now exit." --ok-label="Exit" ; kill $$) #the user has been added to the required groups (excluding sudo)

        else

            usermod -a -G adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,render,netdev,spi,i2c,gpio $x || (zenity --error --text="Failed to add the user to the required groups. The program will now exit." --ok-label="Exit" ; kill $$) #the user has been added to the required groups

        fi

        if [[ "$1" == "--setup" ]] #initial setup stuff
        then

            echo "%$x ALL=(ALL:ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/initsetup-rootpriv #enables the user to run all commands without a password (temporarily)

            #the setup finalizer temporary autologin patch begins

            sed -i 's/#NAutoVTs=6/NAutoVTs=1/g' /etc/systemd/logind.conf

            echo "[Service]
            ExecStart=
            ExecStart=-/usr/sbin/agetty --autologin $x --noclear %I $TERM" | tee -a /etc/systemd/system/getty@tty1.service.d/override.conf

            systemctl is-enabled getty@tty1.service

            systemctl enable getty@tty1.service

            systemctl daemon-reload

            echo 'shock-startup' | tee -a "/home/$x/.bashrc"

            #the setup finalizer temporary autologin patch ends

        fi

        yad --window-icon=system-users --title="User Created Successfully" --text="Congratulations! You have successfully created the user '$x'." --button="Dismiss"\!gtk-quit

elif [[ "$action" == "1" ]] #remove
then

    urs="no"

    until [[ "$urs" == "yes" ]]
    do

        IFS=$'\n'

        user_list=()

        for i in $(ls /home)
        do

            user_list+=("$(getent passwd "$i" | awk -F ':' '{gsub(/,/, "", $5); print $5}') ("$i")" "$i")

        done

        output="$(yad --window-icon=system-users --title="Remove User" --buttons-layout=center --text="Please select the user you would like to remove below:" --list --no-headers --column="Name" --column="Username":HD "${user_list[@]}" --button="Next"\!go-next)"

        detect_exit

        user_to_remove_display_name=$(echo "$output" | awk -F'|' '{print $1}')

        user_to_remove=$(echo "$output" | awk -F'|' '{print $2}')

        yad --window-icon=system-users --title="Remove User" --text="You are about to remove the user '$user_to_remove_display_name'. THIS ACTION IS IRREVERSABLE AND WILL ERASE ALL THEIR DATA. Are you sure you would like to delete '$user_to_remove_display_name'?" --button="DELETE USER"\!remove --button="Cancel"\!gtk-cancel

        rdu=$?

        if [[ "$rdu" != "0" ]]
        then

            yad --window-icon=system-users --title="Operation Aborted" --text="The user '$user_to_remove_display_name' was not removed. No changes were made to your system." --button="Dismiss"\!gtk-quit

            exit

        fi

        urs="yes"

        if [[ "$(w | grep x-session-manager | awk '{print " "$1" "}')" == *" $user_to_remove "* ]]
        then

            yad --window-icon=system-users --title="Cannot Remove User" --text="You cannot remove the user '$user_to_remove_display_name' because they are currently logged in." --button="Retry"\!edit-undo

            detect_exit

            urs="no"

        elif [[ "$(ps -u $user_to_remove)" == *":"* ]]
        then

            yad --window-icon=system-users --title="Cannot Remove User" --text="The user '$user_to_remove_display_name' cannot be removed because they have been logged in and are still occupied by some system processes. To delete this user, reboot the system (without loggin in as '$user_to_remove_display_name') and try again." --button="Dismiss"\!gtk-quit

            exit

        elif ! [[ -d /home/"$user_to_remove" ]]
        then

            yad --window-icon=system-users --title="Cannot Remove User" --text="The user '$user_to_remove_display_name' does not exist." --button="Retry"\!edit-undo

            detect_exit

            urs="no"

        fi

    done

    #removing restricting child profile files if they exist... (ignore errors from these lines if user being removed is not a child profile)

    chattr -R -i /usr/share/shock-pcstl/"$user_to_remove"

    rm -r /usr/share/shock-pcstl/"$user_to_remove"

    #child profile files removed

    deluser --remove-home $user_to_remove || (zenity --error --text="Failed to remove $user_to_remove. The program will now exit." --ok-label="Exit" ; kill $$)

    yad --window-icon=system-users --title="User Successfully Removed" --text="Congratulations! The user '$user_to_remove_display_name' has successfully been removed." --button="Dismiss"\!gtk-quit

elif [[ "$action" == "2" ]]
then

    -u "$runuser" users-admin

fi
            


