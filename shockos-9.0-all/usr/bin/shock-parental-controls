#!/bin/bash

#the root check element begins

if (($(id -u)!=0))
then

    echo "Script must be run as root. Exiting..."

    exit

fi

#the root check element ends

IFS=$'\n'

userlist=()

for i in $(ls /home)
do

    if [[ " $(groups "$i") " == *" shock-child "* ]]
    then

        if [[ -z "$userlist" ]]
        then

            userlist="$(getent passwd "$i" | awk -F ':' '{gsub(/,/, "", $5); print $5}') ("$i")"
        
        else

            userlist+="!$(getent passwd "$i" | awk -F ':' '{gsub(/,/, "", $5); print $5}') ("$i")"

        fi

    fi

done

if [[ -z "$userlist" ]]
then

    yad --window-icon=/usr/share/shock/icons/shock-parental-controls.svg --width=400 --title="Parental Controls" --text="There are currently no child profiles on your system. To add a child profile, create a new user through the 'Users' application and tick the 'Child Profile' checkbox." --button="Dismiss"\!gtk-cancel

    exit

fi

output="$(yad --window-icon=/usr/share/shock/icons/shock-parental-controls.svg --title="Parental Controls" --text="You can manage the limits and restrictions of child profiles." --form --field="Child Profile:":CB "$userlist" --field="Restriction:":CB 'Set/Manage Screen Time Limit!Manage Screen Time Tracking Settings' --button="Next"\!go-next)"

user_display_name="$(echo "$output" | awk -F'|' '{print $1}')"

user="$(echo "$user_display_name" | grep -o -P '(?<=\().*?(?=\))')"

limit="$(echo "$output" | awk -F'|' '{print $2}')"

if [[ "$limit" == "Set/Manage Screen Time Limit" ]]
then

    if [[ -f /usr/share/shock-screentime/"$user"/dailylimit ]]
    then

        yad --window-icon=/usr/share/shock/icons/shock-parental-controls.svg --title="Parental Controls" --text="This user already has a screen time limit set. What would you like to do?" --button="Overwrite"\!gtk-edit:0 --button="Remove"\!remove:1 --button="Cancel"\!gtk-cancel:2

        ex=$?

        if ((ex!=0)) && ((ex!=1))
        then

            notify-send --icon=/usr/share/shock/icons/shock-parental-controls.svg --app-name="Parental Controls" "Parental Controls" "Operation aborted. No changes were made to your system."

            exit

        elif ((ex==1))
        then

            chattr -i /usr/share/shock-screentime/"$user"/dailylimit

            rm -r /usr/share/shock-screentime/"$user"/dailylimit

            notify-send --icon=/usr/share/shock/icons/shock-parental-controls.svg --app-name="Parental Controls" "Parental Controls" "The screen time limit for the user '$user_display_name' was removed successfully."

            exit

        fi

    fi

    #the time limit patch begins

    until ((total_minutes>=10))
    do

        output="$(yad --window-icon=/usr/share/shock/icons/shock-parental-controls.svg --title="Screen Time Limit" --text="You can set a daily screen time limit for $user_display_name." --form --field="Hours:":NUM '2!0..23' --field="Minutes:":NUM '30!0..59' --button="Apply"\!gtk-ok)"

        ex=$?

        if ((ex!=0))
        then

            notify-send --icon=/usr/share/shock/icons/shock-parental-controls.svg --app-name="Parental Controls" "Parental Controls" "Operation aborted. No changes were made to your system."

            exit

        fi

        hours=$(echo "$output" | awk -F'|' '{print $1}')

        minutes=$(echo "$output" | awk -F'|' '{print $2}')

        total_minutes=$((hours*60+minutes))

        if ((minutes<10))
        then

            yad --window-icon=/usr/share/shock/icons/shock-parental-controls.svg --image=emblem-important --title="Parental Controls" --text="The screen time limit cannot be less than 10 minutes." --button="Retry"\!edit-undo

        fi

    done

    mkdir -p /usr/share/shock-screentime/"$user"

    chattr -R -i /usr/share/shock-screentime/"$user"/today-limit

    rm -r /usr/share/shock-screentime/"$user"/today-limit

    chattr -i /usr/share/shock-screentime/"$user"/dailylimit

    echo "$total_minutes" | tee /usr/share/shock-screentime/"$user"/dailylimit

    chattr +i /usr/share/shock-screentime/"$user"/dailylimit

    if ((hours>0))
    then

        if ((minutes>0))
        then

            total_display="$hours hours and $minutes minutes"

        else

            total_display="$hours hours"

        fi

    else

        total_display="$minutes minutes"

    fi

    if ((ex==0)) #if overwriting
    then

        notify-send --icon=/usr/share/shock/icons/shock-parental-controls.svg --app-name="Parental Controls" "Parental Controls" "The daily screen time limit for the user $user_display_name has been changed to $total_display. If they have been logged in today, their timer will be restarted."

    else

        notify-send --icon=/usr/share/shock/icons/shock-parental-controls.svg --app-name="Parental Controls" "Parental Controls" "A daily screen time limit of $total_display has been set for $user_display_name."

    fi

    #the time limit patch ends

elif [[ "$limit" == "Manage Screen Time Track Days" ]]
then

    if [[ -f /usr/share/shock-screentime/"$user"/track-screentime ]]
    then

        track_screentime="TRUE"

    else

        track_screentime="FALSE"

    fi

    source /usr/share/shock-screentime/"$user"/screentime-track-days

    if ((${#screentime_track_days}==0))
    then

        screentime_track_days=60

    fi

    output="$(yad --window-icon=/usr/share/shock/icons/shock-parental-controls.svg --title="Parental Controls" --form --field="Track screen time for user '$user'":CHK "$track_screentime" --field="Days to track screen time":NUM "${screentime_track_days}\!1..65525" --button="Apply"\!gtk-ok)"

    ex=$?

    if ((ex==0))
    then

        track_screentime="$(echo "$output" | awk -F'|' '{print $1}')"

        if [[ "$track_screentime" == "TRUE" ]]
        then

            touch /usr/share/shock-screentime/"$user"/track-screentime

        else

            rm /usr/share/shock-screentime/"$user"/track-screentime

        fi

        screentime_track_days=$(echo "$output" | awk -F'|' '{print $2}')

        echo "screentime_track_days=${screentime_track_days}" | tee /usr/share/shock-screentime/"$user"/screentime-track-days

        for date in $(ls -t /usr/share/shock-screentime/"$user"/dates | tail -n +"${screentime_track_days}") 
        do

            chattr -i "$date"

            rm "$date"

        done

        notify-send --icon=/usr/share/shock/icons/shock-parental-controls.svg --app-name="Parental Controls" "Parental Controls" "The screen time tracking settings for '$user' have been set."

    fi

fi


