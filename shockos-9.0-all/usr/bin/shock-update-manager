#!/bin/bash

if (($(ps aux | awk '{print $1,$11,$12}' | grep -c "$(whoami) /bin/bash /usr/bin/shock-update-manager")>2)) #exits the program if it is already running for this user
then

    wmctrl -Fa "Update Manager"

    exit

fi

IFS=$'\n'

#THE LOADING FUNCTIONS BEGIN

function start_preloading() {

yad --window-icon=software-update-available --title="Update Manager" --progress-text="Refreshing..." --center --progress --pulsate --auto-close --undecorated --no-buttons --skip-taskbar & preloader_killpid=$!

}

function start_loading() {

yad --window-icon=software-update-available --title="Update Manager" --progress-text="Loading..." --center --progress --pulsate --auto-close --undecorated --no-buttons --skip-taskbar & killpid=$!

}

function end_loading() {

kill -9 $killpid

kill -9 $preloader_killpid

}

#THE LOADING FUNCTIONS END

automatic_updates=""

notify_of_new_versions_of_shock_os=""

#THE SETTINGS FUNCTION BEGINS

function settings() {

if [[ -f /etc/sudoers.d/shock_automatic_updates ]] #if automatic updates are enabled
then

    automatic_updates="TRUE"

else #if disabled

    automatic_updates="FALSE"

fi

if [[ ! -f /usr/share/shock-update-manager/disable-release-upgrader-indicator ]] #if notification of new versions of Shock OS is enabled
then

    notify_of_new_versions_of_shock_os="TRUE"

else #if disabled

    notify_of_new_versions_of_shock_os="FALSE"

fi

if [[ -f /usr/share/shock-update-manager/update-scan-interval ]]
then

    interval=$(cat /usr/share/shock-update-manager/update-scan-interval)

else

    interval=86400 #24 hours

fi

hours=$((interval/60))

minutes=$((interval%60))

success="FALSE"

until [[ "$success" == "TRUE" ]]
do

    output="$(yad --window-icon=software-update-available --width=100 --title="Settings" --form --field="Delay between each scan for updates:":LBL "" --field="Hours:":NUM "${hours}\!0..96" --field="Minutes:":NUM "${minutes}\!0..60" --field="":LBL "" --field="If enabled, automatic updates will as root on a daily basis. You cannot log out, shutdown, or restart the system while automatic updates are being applied.":LBL "" --field="Automatic updates":CHK "$automatic_updates" --field="":LBL "" --field="If enabled, you will be notified when an upgrade to a new version of Shock OS is available.":LBL "" --field="Notify me of new versions of Shock OS":CHK "$notify_of_new_versions_of_shock_os" --buttons-layout=edge --button="Cancel"\!cancel:1 --button="Apply"\!gtk-ok:0)"

    ex=$?

    if ((ex==0))
    then

        hours="$(echo "$output" | awk 'BEGIN {FS="|" } { print $2 }')"

        minutes="$(echo "$output" | awk 'BEGIN {FS="|" } { print $3 }')"

        automatic_updates="$(echo "$output" | awk 'BEGIN {FS="|" } { print $6 }')"

        notify_of_new_versions_of_shock_os="$(echo "$output" | awk 'BEGIN {FS="|" } { print $9 }')"

        minutes=$((hours*60+minutes))

        if ((minutes<5))
        then

            yad --window-icon=emblem-important --title="Update Manager" --text="The delay between each scan for updates must be a minimum of five minutes." --button="Retry"\!gtk-undo

        else    

            pkexec bash -c '

            if [[ "$automatic_updates" == "TRUE" ]] && [[ ! -f /etc/sudoers.d/shock_automatic_updates ]] #enable automatic updates
            then

                echo "ALL ALL=NOPASSWD:/usr/bin/shock-auto-updates" | tee /etc/sudoers.d/shock_automatic_updates

            elif [[ "$automatic_updates" == "FALSE" ]] && [[ -f /etc/sudoers.d/shock_automatic_updates ]] #disable automatic updates
            then

                rm /etc/sudoers.d/shock_automatic_updates

            fi

            if [[ "$notify_of_new_versions_of_shock_os" == "TRUE" ]] && [[ -f /usr/share/shock-update-manager/disable-release-upgrader-indicator ]] #enable notification of new versions of Shock OS
            then

                rm /usr/share/shock-update-manager/disable-release-upgrader-indicator

            elif [[ "$notify_of_new_versions_of_shock_os" == "FALSE" ]] && [[ ! -f /usr/share/shock-update-manager/disable-release-upgrader-indicator ]] #disable notification of new versions of Shock OS
            then

                touch /usr/share/shock-update-manager/disable-release-upgrader-indicator

            fi
            
            if (($(cat /usr/share/shock-update-manager/update-scan-interval)!=minutes))
            then

                echo "$minutes" | tee /usr/share/shock-update-manager/update-scan-interval

            fi'

            success="TRUE"

        fi

    else

        exit

    fi

done

}

#THE SETTINGS FUNCTION ENDS

function install_updates() {

gsettings set org.mate.lockdown disable-log-out "true" #stops the user from accessing the shutdown menu while updates are being applied.

kill "$(cat ~/.cache/shock-tmp/shock-update-manager/indicator_pid)"

rm ~/.cache/shock-tmp/shock-update-manager/indicator_pid

if ((${#all_updates[@]}>1))
then

    yad_text="Updates are being installed. Please do not turn off your computer."

else

    yad_text="An update is being installed. Please do not turn off your computer."

fi

yad --notification --image=software-update-available --text="$yad_text" --command='' & notification_killpid=$!

mkdir -p ~/.cache/shock-tmp/shock-update-manager

echo "$notification_killpid" | tee ~/.cache/shock-tmp/shock-update-manager/updates_in_progress_indicator_pid

if ((${#apt_updates[@]}>0))
then

    pkexec env DEBIAN_FRONTEND=gnome apt-get upgrade --show-progress -y | stdbuf -o0 grep 'Progress:' | stdbuf -o0 grep -oP '\d+(?=%)' | (echo "#Downloading updates, please wait..."; stdbuf -o0 sed 's/.*/&\n#&%/g') | yad --window-icon=software-update-available --image=software-update-available --width=400 --title="Update Manager" --text="Installing APT Updates...
<small>Updates will continue in the background if this window is closed.</small>" --text-align=center --fixed --progress --auto-close --no-cancel  --no-buttons --no-esape

fi

if ((${#flatpak_ids[@]}>0))
then

    flatpak update -y | stdbuf -o0 grep 'Installing' | while read progress
    do

        current_progress="$(echo "$progress" | grep -oP '\d+(?=%)')"

        flatpak_counter="$(echo "$progress" | grep -oE "[0-9]+/[0-9]+")"

        current_flatpak="${flatpak_counter%%/*}"

        total_flatpaks="${flatpak_counter#*/}"

        if (($(echo "$flatpak_counter" | wc -l)==1))
        then

            if [[ -z "$flatpak_counter" ]]
            then

                percentage="$current_progress"

            else

                percentage=$(($(($((current_flatpak-1))*100/total_flatpaks))+$((current_progress/total_flatpaks))))

            fi

            echo "${percentage}n"

            echo "#${percentage}%"

        fi

    done | yad --window-icon=software-update-available --image=software-update-available --width=400 --title="Update Manager" --text="Installing Flatpak Updates...
<small>Updates will continue in the background if this window is closed.</small>" --text-align=center --fixed --progress --auto-close --no-cancel  --no-buttons --no-esape

fi

rm ~/.cache/shock-tmp/shock-update-manager/updates_in_progress_indicator_pid

kill "$notification_killpid"

gsettings set org.mate.lockdown disable-log-out "false" #allows the user to access the shutdown menu.

}

rows_per_page=100

function fetch_updates() {

sudo shock-update-manager-refresh

all_updates=($(apt list --upgradable | awk '{ printf "\"%s\"\n", $0 }'))

apt_updates=("${all_updates[@]}")

unset "all_updates[0]" #removes "Listing..." from the list because it is obviously not a package

appstream_file="/var/lib/flatpak/appstream/flathub/$(uname -m)/active/appstream.xml"

appstream_icons_dir="/var/lib/flatpak/appstream/flathub/$(uname -m)/active/icons/64x64"

flatpak_ids=($(flatpak remote-ls --updates --columns=app))

for i in "${flatpak_ids[@]}"
do

    all_updates+=("\"$(flatpak search "$i" --columns=app,name | grep -w "$i" | awk '{str=""; for(i=2;i<=NF;i++) str=str $i " "; sub(/ $/, "", str); printf "%s\n", str}') [FLATPAK]\"")

done

all_updates=($(printf "%s\n" "${all_updates[@]}" | sort))

}

start_preloading

fetch_updates

end_loading

if ((${#all_updates[@]}==0))
then

    kill "$(cat ~/.cache/shock-tmp/shock-update-manager/indicator_pid)"

    rm ~/.cache/shock-tmp/shock-update-manager/indicator_pid

    yad --window-icon=emblem-default --image=emblem-default --buttons-layout=edge --title="Update Manager" --text="Your system is up to date." --button="Settings"\!tweaks-app --button="Dismiss"\!cancel --width=300

    ex=$?

    if ((ex==0)) #settings
    then

        settings

    fi

    exit

elif ((${#all_updates[@]}==1))
then

    window_text="1 update is available."

else

    window_text="${#all_updates[@]} updates are available."

fi

page=0

while true
do

    start_loading

    all_updates_show=("${all_updates[@]:$((rows_per_page*page))}")

    all_updates_show=("${all_updates_show[@]::$((rows_per_page))}")

    mapfile -t all_updates < <(printf '%s\n' "${all_updates[@]}" | sed 's/^"\(.*\)"$/"\1"/')

    update_list=()

    for i in "${all_updates_show[@]}"
    do

        if [[ "$i" == *" [FLATPAK]\"" ]] #if Flatpak application
        then

	        name="${i::-11}\""

	        name="${name#\"}"

	        name="${name%\"}"

	        icon="/usr/share/shock-update-manager/flatpak.svg"
	        
	        update_list+=("$icon" "$name")

        else #if APT package

            name="${i%%/*}"

            name="${name#\"}"

	        icon="/usr/share/shock-update-manager/apt.svg"

            full_name="$(grep -A 10000 "<pkgname>$name</pkgname>" /var/lib/app-info/xml/*.xml | grep '<name>' | head -n1 | awk -F'[<>]' '{print $3}')"

            if [[ -n "$full_name" ]]
            then

                name="$full_name"

            fi

	        update_list+=("$icon" "$name")

        fi

    done

    echo "UPDATE LIST: ${update_list[@]}" #DEBUG

    if ((${#update_list[@]}>rows_per_page))
    then

        if ((page>0))
        then

            page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

        else

            page_buttons='--button=Jump!gtk-jump-to-ltr:50 --button=Next!gtk-go-forward-ltr:60'

        fi

    elif ((page>0))
    then

        page_buttons='--button=Previous!gtk-go-forward-rtl:40 --button=Jump!gtk-jump-to-ltr:50' 

    else

        page_buttons=""

    fi

    end_loading

    yad --window-icon=software-update-available --title="Update Manager" --width=800 --height=500 --text="$window_text" --list --no-click --buttons-layout=edge --column="Type":IMG --column="Name" $page_buttons --button="Settings"\!tweaks-app:1 --button="Install Updates"\!software-update-available:2 "${update_list[@]}"

    ex=$?

    if ((ex==40)) #previous
    then

        page=$((page-1))

    elif ((ex==60)) #next
    then

        page=$((page+1))

    elif ((ex==50)) #jump
    then

        jump_page=$(yad --window-icon=software-update-available --title="Update Manager" --form --field="Jump to Page:":NUM "$((page+1))\!1..$(($(expr ${#search_results_prep_full[@]} / $rows_per_page)+1))" --button=Jump!gtk-jump-to-ltr)

        ex=$?

        jump_page=$(echo "$jump_page" | awk -F'|' '{print $1}')

        if ((ex==0))
        then

            page=$((jump_page-1))

        fi

    elif ((ex==1)) #settings
    then

        settings

    elif ((ex==2)) #install updates
    then

        install_updates

        yad --window-icon=software-update-available --title="Update Manager" --progress-text="Refreshing cache..." --center --progress --pulsate --auto-close --undecorated --no-buttons --skip-taskbar & refresh_killpid=$!

        fetch_updates

        kill -9 $refresh_killpid

        if ((${#all_updates[@]}>0)) #if there are STILL updates available (updates likely failed or were interrupted)
        then

	        zenity --error --text="Failed to install the updates. Please double check your internet connection and try again later." --ok-label="Exit"

        else

            kill "$(cat ~/.cache/shock-tmp/shock-update-manager/indicator_pid)"

            rm ~/.cache/shock-tmp/shock-update-manager/indicator_pid

	        notify-send --icon=software-update-available --app-name="Update Manager" "Update Manager" "Your system is up to date."

        fi

        exit

    else

        exit

    fi

done







