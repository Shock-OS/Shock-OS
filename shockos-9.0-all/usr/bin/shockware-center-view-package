#!/bin/bash

show_apt_packages="$1"

show_flatpaks="$2"

flatpak_appstream_dir="$3"

full_name="$5"

type="$6"

package="$7"

id="$8"

icon="$9"

if [[ "$type" == "B" ]] && [[ "$show_apt_packages" == "FALSE" ]]
then

    type="F"

elif [[ "$type" == "B" ]] && [[ "$show_flatpaks" == "FALSE" ]]
then

    type="A"

fi

#THE CHROMIUM BANDAID FIX BEGINS

if [[ "$package" == "chromium" ]]
then

    package="rpi-chromium-mods"

fi

#THE CHROMIUM BANDAID FIX ENDS

#THE LOADING FUNCTIONS BEGIN

function start_loading() {

yad --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Shockware Center" --progress-text="Loading app info..." --center --progress --pulsate --auto-close --undecorated --no-buttons --skip-taskbar & killpid=$!

}

function end_loading() {

kill -9 $killpid

}

#THE LOADING FUNCTIONS END

#THE NOTIFICATION FUNCIONS BEGIN

function show_indicator() {

mkdir -p ~/.cache/shock-tmp/shockware-center

if [[ -f ~/.cache/shock-tmp/shockware-center/indicator_instances ]]
then

    local instances=$(($(cat ~/.cache/shock-tmp/shockware-center/indicator_instances)+1))

    echo "$instances" | tee ~/.cache/shock-tmp/shockware-center/indicator_instances

else

    yad --notification --image=/usr/share/shock/icons/shockware-center.svg --icon-size=30 --text="The Shockware Center is running. Please do not turn off your computer." --command='' & echo "$!" | tee ~/.cache/shock-tmp/shockware-center/indicator_killpid

    echo "1" | tee ~/.cache/shock-tmp/shockware-center/indicator_instances

fi

}

function hide_indicator() {

if (($(cat ~/.cache/shock-tmp/shockware-center/indicator_instances)>1)) #if other apps are being installed, keep the notification
then

    local instances=$(($(cat ~/.cache/shock-tmp/shockware-center/indicator_instances)-1))

    echo "$instances" | tee ~/.cache/shock-tmp/shockware-center/indicator_instances

else #kill the notification

    rm ~/.cache/shock-tmp/shockware-center/indicator_instances

    kill "$(cat ~/.cache/shock-tmp/shockware-center/indicator_killpid)"

    rm ~/.cache/shock-tmp/shockware-center/indicator_killpid

fi

}

#THE NOTIFICATION FUNCTIONS END

function apt_fetch_info() {

details="$(apt show $package)"

if [[ "$details" == *"State: not a real package (virtual)"* ]] #if virtual package (likely only to happen on a 32-bit system)
then

    if [[ "$type" == "A" ]] #if only apt package.
    then

        end_loading

        yad --window-icon=/usr/share/shock/icons/shockware-center.svg --image=emblem-important --title="Shockware Center" --text="$full_name is not available." --button="Dismiss"\!gtk-cancel

        exit

    else #if duplicate package

        irbuttons_apt=""

        icon="emblem-important"

        tmpfile="$(mktemp)"

        echo "$full_name is not available." | tee "$tmpfile"

    fi

else #if normal package

    installed_packages=($(apt list --installed | awk -F/ '{print $1}' | uniq)) #ChatGPT

    if [[ " ${installed_packages[@]} " == *" $package "* ]] #if installed
    then

	    irbuttons_apt='--button=Launch!mate-panel-launcher:3 --button=Remove!remove:4'

    else

	    irbuttons_apt='--button=Install!add:5'

    fi

    description="$(echo "$details" | grep -A 10000 Description:)"

    version="$(echo "$details" | grep Version:)"

    size="$(echo "$details" | grep Size:)"

    tmpfile="$(mktemp)"

    echo "$description

$version

$size" | tee "$tmpfile"

fi

}

function apt_launch() {

"$package" &

}

function wait_apt_lock() {

mkdir -p ~/.cache/shock-tmp/shockware-center

echo "$package" | tee -a ~/.cache/shock-tmp/shockware-center/apt-queue

until (($(lslocks | grep -c apt)==0)) && [[ "$(sed -n 1p ~/.cache/shock-tmp/shockware-center/apt-queue)" == "$package" ]] #waits until /var/lib/dpkg/lock-frontend is not being held
do

    echo "#Waiting for APT lock..."

    sleep 3

done

echo "#"

}

function update_apt_queue() {

if (($(cat ~/.cache/shock-tmp/shockware-center/apt-queue | wc -l)<2)) #removes the queue file if no other operations are pending.
then

    rm ~/.cache/shock-tmp/shockware-center/apt-queue

else

    sed -i 1d ~/.cache/shock-tmp/shockware-center/apt-queue

fi

}

function apt_remove() {

yad --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Shockware Center" --text="Are you sure you would like to remove $full_name$both?" --button="Yes, remove"\!gtk-remove --button="No, keep"\!gtk-cancel

ex=$?

if ((ex==0))
then

    show_indicator

	{ wait_apt_lock; pkexec env DEBIAN_FRONTEND=gnome apt remove -y $package; } | yad --no-buttons --no-escape --fixed --width=400 --window-icon=/usr/share/shock/icons/shockware-center.svg --image="$icon" --title="Shockware Center" --text="Removing $full_name$both..." --text-align=center --progress-text="" --auto-close --progress --pulsate

    installed_packages=($(apt list --installed | awk -F/ '{print $1}' | uniq)) #ChatGPT

    hide_indicator

    update_apt_queue

    if [[ " ${installed_packages[@]} " != *" $package "* ]] #if removed successfully
    then

        notify-send --app-name="Shockware Center" --icon=/usr/share/shock/icons/shockware-center.svg "App Removed Successfully" "$full_name$both was successfully removed."

    else

        notify-send --app-name="Shockware Center" --icon=emblem-important "Failed to Remove App" "Failed to remove $full_name$both. There may be a problem with your system's package manager."

    fi

fi

}

function apt_install() {

show_indicator

{ wait_apt_lock; pkexec env DEBIAN_FRONTEND=gnome apt-get install --show-progress -y $package | stdbuf -o0 grep 'Progress:' | stdbuf -o0 grep -oP '\d+(?=%)' | (echo "#Pending..."; stdbuf -o0 sed 's/.*/&\n#&%/g'); } | yad --no-buttons --no-escape --fixed --width=400 --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Shockware Center" --image="$icon" --text="Installing $full_name$both...
<small>The installation will continue in the background if this window is closed.</small>" --text-align=center --auto-close --progress

installed_packages=($(apt list --installed | awk -F/ '{print $1}' | uniq)) #ChatGPT

hide_indicator

update_apt_queue

if [[ " ${installed_packages[@]} " == *" $package "* ]] #if installed successfully
then

    notify-send --app-name="Shockware Center" --icon="$icon" "App Installed Successfully" "$full_name$both was successfully installed."

else

    notify-send --app-name="Shockware Center" --icon=emblem-important "Failed to Install App" "Failed to install $full_name$both. Please double check your internet connection and try again later."

fi

}

function flatpak_fetch_info() {

installed_flatpaks=($(flatpak list --columns=app | uniq)) #ChatGPT

if [[ " ${installed_flatpaks[@]} " == *" $id "* ]] #if installed
then

	irbuttons_flatpak='--button=Launch!mate-panel-launcher:6 --button=Remove!remove:7'

else

	irbuttons_flatpak='--button=Install!add:8'

fi

description="$(grep -A 10000 "<id>$id</id>" "$flatpak_appstream_dir"/appstream.xml | grep "<description>" | head -n1 | sed -e 's/<[^>]*>//g' -e 's/^[[:space:]]*//')"

if [[ -n "$description" ]] #if description found
then

    description="Description: $description"

else #if no description found

    description="No description found."

fi

tmpfile2="$(mktemp)"

echo "$description" | tee "$tmpfile2"

}

function flatpak_launch() {

flatpak run "$id" &

}

function flatpak_remove() {

yad --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Shockware Center" --text="Are you sure you would like to remove $full_name$both?" --button="Yes, remove"\!remove --button="No, keep"\!gtk-cancel

ex=$?

if ((ex==0))
then

    show_indicator

	flatpak uninstall -y "$id" | yad --no-buttons --no-escape --fixed --width=400 --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Shockware Center" --image="$icon" --text="Removing $full_name$both..." --text-align=center --progress-text="" --auto-close --progress --pulsate

    installed_flatpaks=($(flatpak list --columns=app | uniq)) #ChatGPT

    hide_indicator

    if [[ " ${installed_flatpaks[@]} " != *" $id "* ]] #if removed successfully
    then

        notify-send --app-name="Shockware Center" --icon=/usr/share/shock/icons/shockware-center.svg "App Removed Successfully" "$full_name$both was successfully removed."

    else

        notify-send --app-name="Shockware Center" --icon=emblem-important "Failed to Remove App" "Failed to remove $full_name$both. There may be a problem with Flatpak."

    fi

fi

}

function flatpak_install() {

show_indicator

flatpak install -y "$id" | stdbuf -o0 grep 'Installing' | while read progress
do

    current_progress="$(echo "$progress" | grep -oP '\d+(?=%)')"

    flatpak_counter="$(echo "$progress" | grep -oE "[0-9]+/[0-9]+")"

    current_flatpak="${flatpak_counter%%/*}"

    total_flatpaks="${flatpak_counter#*/}"

    if (($(echo "$flatpak_counter" | wc -l)==1))
    then

        if [[ -z "$flatpak_counter" ]]
        then

            percentage="$current_progress"

        else

            percentage=$(($(($((current_flatpak-1))*100/total_flatpaks))+$((current_progress/total_flatpaks))))

        fi

        echo "${percentage}n"

        echo "#${percentage}%"

    fi

done | yad --no-buttons --no-escape --fixed --width=400 --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Shockware Center" --image="$icon" --text="Installing $full_name$both...
<small>The installation will continue in the background if this window is closed.</small>" --text-align=center --auto-close --progress

installed_flatpaks=($(flatpak list --columns=app | uniq)) #ChatGPT

hide_indicator

if [[ " ${installed_flatpaks[@]} " == *" $id "* ]] #if installed successfully
then

    notify-send --app-name="Shockware Center" --icon="$icon" "App Installed Successfully" "$full_name$both was successfully installed."

else

    notify-send --app-name="Shockware Center" --icon=emblem-important "Failed to Install App" "Failed to install $full_name$both. Please double check your internet connection and try again later."

fi

}

start_loading

if (($(getconf LONG_BIT)==32))
then

    arch="arm"

else

    arch="aarch64"

fi

key=$RANDOM

until (($(ps aux | grep -c "$key")==1))
do

    key=$RANDOM

done

if [[ "$type" == "A" ]] #if APT package
then

    apt_fetch_info

	end_loading

	yad --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Details of $full_name" --text="APT package" --width=830 --height=300 --image="$icon" --text-info --filename="$tmpfile" $irbuttons_apt

	ex=$?

	rm "$tmpfile"

	if ((ex==3)) #launch
	then

		apt_launch

	elif ((ex==4)) #remove
	then

		apt_remove

	elif ((ex==5)) #install
	then

		apt_install

	fi

elif [[ "$type" == "F" ]] #if Flatpak
then

	flatpak_fetch_info

	end_loading

	yad --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Details of $full_name" --text="Flatpak application" --width=830 --height=300 --image="$icon" --text-info --wrap --filename="$tmpfile2" $irbuttons_flatpak

	ex=$?

	rm "$tmpfile2"

	if ((ex==6)) #launch
	then

		flatpak_launch

	elif ((ex==7)) #remove
	then

		flatpak_remove

	elif ((ex==8)) #install
	then

		flatpak_install

	fi

else #if both

    apt_fetch_info

    yad --plug=$key --tabnum=1 --image="$icon" --text-info --filename="$tmpfile" &

    flatpak_fetch_info

    yad --plug=$key --tabnum=2 --image="$icon" --text-info --wrap --filename="$tmpfile2" &

    end_loading

    if [[ " ${installed_packages[@]} " == *" $package "* ]] #if installed
    then

	    irbuttons_apt='--button=Launch APT!mate-panel-launcher:3'

        irbuttons_apt_2='--button=Remove APT!remove:4'

    else

	    irbuttons_apt='--button=Install APT!add:5'

    fi

    if [[ " ${installed_flatpaks[@]} " == *" $id "* ]] #if installed
    then

	    irbuttons_flatpak='--button=Launch Flatpak!mate-panel-launcher:6'

        irbuttons_flatpak_2='--button=Remove Flatpak!remove:7'

    else

	    irbuttons_flatpak='--button=Install Flatpak!add:8'

    fi

    yad --window-icon=/usr/share/shock/icons/shockware-center.svg --title="Details of $full_name" --text="$full_name is available from both APT and Flatpak." --width=830 --height=300 --notebook --key=$key --tab="APT" --tab="Flatpak" "$irbuttons_apt" "$irbuttons_apt_2" "$irbuttons_flatpak" "$irbuttons_flatpak_2"

    ex=$?

    rm "$tmpfile"

    rm "$tmpfile2"

    if ((ex==3)) #launch APT
	then

		apt_launch

	elif ((ex==4)) #remove APT
	then

        both=" (APT)"

		apt_remove

	elif ((ex==5)) #install APT
	then

        both=" (APT)"

		apt_install

	elif ((ex==6)) #launch FLATPAK
	then

		flatpak_launch

	elif ((ex==7)) #remove FLATPAK
	then

        both=" (Flatpak)"

		flatpak_remove

	elif ((ex==8)) #install FLATPAK
	then

        both=" (Flatpak)"

		flatpak_install

	fi

fi

    

	

